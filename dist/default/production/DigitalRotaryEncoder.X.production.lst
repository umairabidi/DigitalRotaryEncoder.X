

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sat Jul 22 19:00:44 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F616
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 09/02/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F616 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0007                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000E                     	;# 
    65     000E                     	;# 
    66     000F                     	;# 
    67     0010                     	;# 
    68     0011                     	;# 
    69     0012                     	;# 
    70     0013                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0016                     	;# 
    75     0017                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001C                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0087                     	;# 
    85     008C                     	;# 
    86     008E                     	;# 
    87     0090                     	;# 
    88     0091                     	;# 
    89     0092                     	;# 
    90     0095                     	;# 
    91     0095                     	;# 
    92     0096                     	;# 
    93     0096                     	;# 
    94     0099                     	;# 
    95     0099                     	;# 
    96     009A                     	;# 
    97     009E                     	;# 
    98     009F                     	;# 
    99     0005                     _PORTAbits	set	5
   100     0007                     _PORTCbits	set	7
   101     000B                     _INTCONbits	set	11
   102     0096                     _IOCAbits	set	150
   103     0091                     _ANSEL	set	145
   104     0087                     _TRISCbits	set	135
   105                           
   106                           	psect	cinit
   107     000B                     start_initialization:	
   108                           ; #config settings
   109                           
   110     000B                     __initialization:
   111                           
   112                           ; Clear objects allocated to BANK0
   113     000B  1283               	bcf	3,5	;RP0=0, select bank0
   114     000C  01AF               	clrf	__pbssBANK0& (0+127)
   115     000D                     end_of_initialization:	
   116                           ;End of C runtime variable initialization code
   117                           
   118     000D                     __end_of__initialization:
   119     000D  0183               	clrf	3
   120     000E  28FB               	ljmp	_main	;jump to C main() function
   121                           
   122                           	psect	bssBANK0
   123     002F                     __pbssBANK0:
   124     002F                     _int_F:
   125     002F                     	ds	1
   126                           
   127                           	psect	cstackCOMMON
   128     0070                     __pcstackCOMMON:
   129     0070                     ?_MAX7219_Setup:
   130     0070                     ?_ISR_function:	
   131                           ; 1 bytes @ 0x0
   132                           
   133     0070                     ??_ISR_function:	
   134                           ; 1 bytes @ 0x0
   135                           
   136                           
   137                           ; 1 bytes @ 0x0
   138     0070                     	ds	2
   139     0072                     ?_SPI_send:
   140     0072                     ?___awdiv:	
   141                           ; 1 bytes @ 0x2
   142                           
   143     0072                     ?___awmod:	
   144                           ; 2 bytes @ 0x2
   145                           
   146     0072                     SPI_send@data:	
   147                           ; 2 bytes @ 0x2
   148                           
   149     0072                     ___awdiv@divisor:	
   150                           ; 1 bytes @ 0x2
   151                           
   152     0072                     ___awmod@divisor:	
   153                           ; 2 bytes @ 0x2
   154                           
   155                           
   156                           ; 2 bytes @ 0x2
   157     0072                     	ds	1
   158     0073                     ??_SPI_send:
   159                           
   160                           ; 1 bytes @ 0x3
   161     0073                     	ds	1
   162     0074                     SPI_send@addr:
   163     0074                     ___awdiv@dividend:	
   164                           ; 1 bytes @ 0x4
   165                           
   166     0074                     ___awmod@dividend:	
   167                           ; 2 bytes @ 0x4
   168                           
   169                           
   170                           ; 2 bytes @ 0x4
   171     0074                     	ds	1
   172     0075                     SPI_send@i:
   173                           
   174                           ; 2 bytes @ 0x5
   175     0075                     	ds	1
   176     0076                     ??___awdiv:
   177     0076                     ??___awmod:	
   178                           ; 1 bytes @ 0x6
   179                           
   180     0076                     ___awdiv@counter:	
   181                           ; 1 bytes @ 0x6
   182                           
   183     0076                     ___awmod@counter:	
   184                           ; 1 bytes @ 0x6
   185                           
   186                           
   187                           ; 1 bytes @ 0x6
   188     0076                     	ds	1
   189     0077                     ??_MAX7219_Setup:
   190     0077                     ___awdiv@sign:	
   191                           ; 1 bytes @ 0x7
   192                           
   193     0077                     ___awmod@sign:	
   194                           ; 1 bytes @ 0x7
   195                           
   196                           
   197                           ; 1 bytes @ 0x7
   198     0077                     	ds	1
   199     0078                     ?_display_digit:
   200     0078                     display_digit@digit_X:	
   201                           ; 1 bytes @ 0x8
   202                           
   203     0078                     ___awdiv@quotient:	
   204                           ; 2 bytes @ 0x8
   205                           
   206                           
   207                           ; 2 bytes @ 0x8
   208     0078                     	ds	2
   209     007A                     display_digit@val:
   210                           
   211                           ; 2 bytes @ 0xA
   212     007A                     	ds	2
   213     007C                     ??_display_num:
   214     007C                     ??_display_digit:	
   215                           ; 1 bytes @ 0xC
   216                           
   217                           
   218                           	psect	cstackBANK0
   219     0020                     __pcstackBANK0:	
   220                           ; 1 bytes @ 0xC
   221                           
   222     0020                     ?_display_num:
   223     0020                     display_num@val:	
   224                           ; 1 bytes @ 0x0
   225                           
   226                           
   227                           ; 2 bytes @ 0x0
   228     0020                     	ds	2
   229     0022                     display_num@i:
   230                           
   231                           ; 2 bytes @ 0x2
   232     0022                     	ds	2
   233     0024                     ?_main:
   234     0024                     main@argc:	
   235                           ; 2 bytes @ 0x4
   236                           
   237                           
   238                           ; 2 bytes @ 0x4
   239     0024                     	ds	2
   240     0026                     main@argv:
   241                           
   242                           ; 2 bytes @ 0x6
   243     0026                     	ds	2
   244     0028                     ??_main:
   245                           
   246                           ; 1 bytes @ 0x8
   247     0028                     	ds	4
   248     002C                     main@counter:
   249                           
   250                           ; 2 bytes @ 0xC
   251     002C                     	ds	2
   252     002E                     main@dir:
   253                           
   254                           ; 1 bytes @ 0xE
   255     002E                     	ds	1
   256                           
   257                           	psect	maintext
   258     00FB                     __pmaintext:	
   259 ;;
   260 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   261 ;;
   262 ;; *************** function _main *****************
   263 ;; Defined at:
   264 ;;		line 56 in file "DigitalRotaryEncoder.c"
   265 ;; Parameters:    Size  Location     Type
   266 ;;  argc            2    4[BANK0 ] int 
   267 ;;  argv            2    6[BANK0 ] PTR PTR unsigned char 
   268 ;; Auto vars:     Size  Location     Type
   269 ;;  counter         2   12[BANK0 ] unsigned int 
   270 ;;  dir             1   14[BANK0 ] unsigned char 
   271 ;; Return value:  Size  Location     Type
   272 ;;                  2    4[BANK0 ] int 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : B00/0
   277 ;;		On exit  : 100/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMMON   BANK0   BANK1
   280 ;;      Params:         0       4       0
   281 ;;      Locals:         0       3       0
   282 ;;      Temps:          0       4       0
   283 ;;      Totals:         0      11       0
   284 ;;Total ram usage:       11 bytes
   285 ;; Hardware stack levels required when called: 4
   286 ;; This function calls:
   287 ;;		_MAX7219_Setup
   288 ;;		_display_num
   289 ;; This function is called by:
   290 ;;		Startup code after reset
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294     00FB                     _main:	
   295                           ;psect for function _main
   296                           
   297                           
   298                           ;DigitalRotaryEncoder.c: 57: TRISCbits.TRISC2 = 0;
   299                           
   300                           ;incstack = 0
   301                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   302     00FB  1683               	bsf	3,5	;RP0=1, select bank1
   303     00FC  1107               	bcf	7,2	;volatile
   304                           
   305                           ;DigitalRotaryEncoder.c: 58: TRISCbits.TRISC1 = 0;
   306     00FD  1087               	bcf	7,1	;volatile
   307                           
   308                           ;DigitalRotaryEncoder.c: 59: TRISCbits.TRISC0 = 0;
   309     00FE  1007               	bcf	7,0	;volatile
   310                           
   311                           ;DigitalRotaryEncoder.c: 60: ANSEL = 0;
   312     00FF  0191               	clrf	17	;volatile
   313                           
   314                           ;DigitalRotaryEncoder.c: 61: IOCAbits.IOC0 = 1;
   315     0100  1416               	bsf	22,0	;volatile
   316                           
   317                           ;DigitalRotaryEncoder.c: 62: INTCONbits.GIE = 1;
   318     0101  178B               	bsf	11,7	;volatile
   319                           
   320                           ;DigitalRotaryEncoder.c: 63: INTCONbits.RAIE = 1;
   321     0102  158B               	bsf	11,3	;volatile
   322                           
   323                           ;DigitalRotaryEncoder.c: 65: PORTCbits.RC0 = 0;
   324     0103  1283               	bcf	3,5	;RP0=0, select bank0
   325     0104  1007               	bcf	7,0	;volatile
   326                           
   327                           ;DigitalRotaryEncoder.c: 66: PORTCbits.RC1 = 1;
   328     0105  1487               	bsf	7,1	;volatile
   329                           
   330                           ;DigitalRotaryEncoder.c: 67: PORTCbits.RC2 = 0;
   331     0106  1107               	bcf	7,2	;volatile
   332                           
   333                           ;DigitalRotaryEncoder.c: 68: MAX7219_Setup();
   334     0107  2170               	fcall	_MAX7219_Setup
   335                           
   336                           ;DigitalRotaryEncoder.c: 70: uint16_t counter = 5;
   337     0108  3005               	movlw	5
   338     0109  00AC               	movwf	main@counter
   339     010A  3000               	movlw	0
   340     010B  00AD               	movwf	main@counter+1
   341                           
   342                           ;DigitalRotaryEncoder.c: 71: uint8_t dir;;DigitalRotaryEncoder.c: 72: int_F = 0;
   343     010C  01AF               	clrf	_int_F
   344                           
   345                           ;DigitalRotaryEncoder.c: 73: display_num(12345678);
   346     010D  304E               	movlw	78
   347     010E  00A0               	movwf	display_num@val
   348     010F  3061               	movlw	97
   349     0110  00A1               	movwf	display_num@val+1
   350     0111  213A               	fcall	_display_num
   351     0112                     l808:
   352                           
   353                           ;DigitalRotaryEncoder.c: 76: if (int_F){
   354     0112  1283               	bcf	3,5	;RP0=0, select bank0
   355     0113  082F               	movf	_int_F,w
   356     0114  1903               	btfsc	3,2
   357     0115  2912               	goto	l808
   358                           
   359                           ;DigitalRotaryEncoder.c: 77: dir = (PORTAbits.RA0 + PORTAbits.RA1)%2;
   360     0116  0C05               	rrf	5,w	;volatile
   361     0117  3901               	andlw	1
   362     0118  00A8               	movwf	??_main
   363     0119  0805               	movf	5,w	;volatile
   364     011A  3901               	andlw	1
   365     011B  0728               	addwf	??_main,w
   366     011C  3901               	andlw	1
   367     011D  00AE               	movwf	main@dir
   368                           
   369                           ;DigitalRotaryEncoder.c: 78: counter += dir*2 - 1;
   370     011E  082E               	movf	main@dir,w
   371     011F  00A8               	movwf	??_main
   372     0120  01A9               	clrf	??_main+1
   373     0121  1003               	clrc
   374     0122  0DA8               	rlf	??_main,f
   375     0123  0DA9               	rlf	??_main+1,f
   376     0124  0828               	movf	??_main,w
   377     0125  3EFF               	addlw	255
   378     0126  00AA               	movwf	??_main+2
   379     0127  0829               	movf	??_main+1,w
   380     0128  1803               	skipnc
   381     0129  3E01               	addlw	1
   382     012A  3EFF               	addlw	255
   383     012B  00AB               	movwf	??_main+3
   384     012C  082A               	movf	??_main+2,w
   385     012D  07AC               	addwf	main@counter,f
   386     012E  1803               	skipnc
   387     012F  0AAD               	incf	main@counter+1,f
   388     0130  082B               	movf	??_main+3,w
   389     0131  07AD               	addwf	main@counter+1,f
   390                           
   391                           ;DigitalRotaryEncoder.c: 79: display_num(counter);
   392     0132  082D               	movf	main@counter+1,w
   393     0133  00A1               	movwf	display_num@val+1
   394     0134  082C               	movf	main@counter,w
   395     0135  00A0               	movwf	display_num@val
   396     0136  213A               	fcall	_display_num
   397                           
   398                           ;DigitalRotaryEncoder.c: 80: int_F = 0;
   399     0137  1283               	bcf	3,5	;RP0=0, select bank0
   400     0138  01AF               	clrf	_int_F
   401     0139  2912               	goto	l808
   402     013A                     __end_of_main:
   403                           
   404                           	psect	text1
   405     013A                     __ptext1:	
   406 ;; *************** function _display_num *****************
   407 ;; Defined at:
   408 ;;		line 118 in file "DigitalRotaryEncoder.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;  val             2    0[BANK0 ] int 
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  i               2    2[BANK0 ] int 
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : 100/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0   BANK1
   422 ;;      Params:         0       2       0
   423 ;;      Locals:         0       2       0
   424 ;;      Temps:          0       0       0
   425 ;;      Totals:         0       4       0
   426 ;;Total ram usage:        4 bytes
   427 ;; Hardware stack levels used: 1
   428 ;; Hardware stack levels required when called: 3
   429 ;; This function calls:
   430 ;;		___awdiv
   431 ;;		___awmod
   432 ;;		_display_digit
   433 ;; This function is called by:
   434 ;;		_main
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438     013A                     _display_num:	
   439                           ;psect for function _display_num
   440                           
   441                           
   442                           ;DigitalRotaryEncoder.c: 119: int i;;DigitalRotaryEncoder.c: 120: for (i=1; i<=8; i++){
   443                           
   444                           ;incstack = 0
   445                           ; Regs used in _display_num: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   446     013A  3001               	movlw	1
   447     013B  00A2               	movwf	display_num@i
   448     013C  3000               	movlw	0
   449     013D  00A3               	movwf	display_num@i+1
   450     013E                     l774:
   451                           
   452                           ;DigitalRotaryEncoder.c: 121: display_digit(i, val%10);
   453     013E  1283               	bcf	3,5	;RP0=0, select bank0
   454     013F  0823               	movf	display_num@i+1,w
   455     0140  00F9               	movwf	display_digit@digit_X+1
   456     0141  0822               	movf	display_num@i,w
   457     0142  00F8               	movwf	display_digit@digit_X
   458     0143  300A               	movlw	10
   459     0144  00F2               	movwf	___awmod@divisor
   460     0145  3000               	movlw	0
   461     0146  00F3               	movwf	___awmod@divisor+1
   462     0147  0821               	movf	display_num@val+1,w
   463     0148  00F5               	movwf	___awmod@dividend+1
   464     0149  0820               	movf	display_num@val,w
   465     014A  00F4               	movwf	___awmod@dividend
   466     014B  2068               	fcall	___awmod
   467     014C  0873               	movf	?___awmod+1,w
   468     014D  00FB               	movwf	display_digit@val+1
   469     014E  0872               	movf	?___awmod,w
   470     014F  00FA               	movwf	display_digit@val
   471     0150  2191               	fcall	_display_digit
   472                           
   473                           ;DigitalRotaryEncoder.c: 122: val /= 10;
   474     0151  300A               	movlw	10
   475     0152  00F2               	movwf	___awdiv@divisor
   476     0153  3000               	movlw	0
   477     0154  00F3               	movwf	___awdiv@divisor+1
   478     0155  0821               	movf	display_num@val+1,w
   479     0156  00F5               	movwf	___awdiv@dividend+1
   480     0157  0820               	movf	display_num@val,w
   481     0158  00F4               	movwf	___awdiv@dividend
   482     0159  200F               	fcall	___awdiv
   483     015A  0873               	movf	?___awdiv+1,w
   484     015B  00A1               	movwf	display_num@val+1
   485     015C  0872               	movf	?___awdiv,w
   486     015D  00A0               	movwf	display_num@val
   487     015E  3001               	movlw	1
   488     015F  07A2               	addwf	display_num@i,f
   489     0160  1803               	skipnc
   490     0161  0AA3               	incf	display_num@i+1,f
   491     0162  3000               	movlw	0
   492     0163  07A3               	addwf	display_num@i+1,f
   493     0164  0823               	movf	display_num@i+1,w
   494     0165  3A80               	xorlw	128
   495     0166  00FF               	movwf	127
   496     0167  3080               	movlw	128
   497     0168  027F               	subwf	127,w
   498     0169  1D03               	skipz
   499     016A  296D               	goto	u545
   500     016B  3009               	movlw	9
   501     016C  0222               	subwf	display_num@i,w
   502     016D                     u545:
   503     016D  1803               	btfsc	3,0
   504     016E  0008               	return
   505     016F  293E               	goto	l774
   506     0170                     __end_of_display_num:
   507                           
   508                           	psect	text2
   509     0191                     __ptext2:	
   510 ;; *************** function _display_digit *****************
   511 ;; Defined at:
   512 ;;		line 114 in file "DigitalRotaryEncoder.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  digit_X         2    8[COMMON] int 
   515 ;;  val             2   10[COMMON] int 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;		None
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 100/0
   524 ;;		On exit  : 100/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMMON   BANK0   BANK1
   527 ;;      Params:         4       0       0
   528 ;;      Locals:         0       0       0
   529 ;;      Temps:          0       0       0
   530 ;;      Totals:         4       0       0
   531 ;;Total ram usage:        4 bytes
   532 ;; Hardware stack levels used: 1
   533 ;; Hardware stack levels required when called: 2
   534 ;; This function calls:
   535 ;;		_SPI_send
   536 ;; This function is called by:
   537 ;;		_display_num
   538 ;; This function uses a non-reentrant model
   539 ;;
   540                           
   541     0191                     _display_digit:	
   542                           ;psect for function _display_digit
   543                           
   544                           
   545                           ;DigitalRotaryEncoder.c: 115: SPI_send(digit_X, val);
   546                           
   547                           ;incstack = 0
   548                           ; Regs used in _display_digit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   549     0191  087A               	movf	display_digit@val,w
   550     0192  00F2               	movwf	SPI_send@data
   551     0193  0878               	movf	display_digit@digit_X,w
   552     0194  20B3               	fcall	_SPI_send
   553     0195  0008               	return
   554     0196                     __end_of_display_digit:
   555                           
   556                           	psect	text3
   557     0068                     __ptext3:	
   558 ;; *************** function ___awmod *****************
   559 ;; Defined at:
   560 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awmod.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;  divisor         2    2[COMMON] int 
   563 ;;  dividend        2    4[COMMON] int 
   564 ;; Auto vars:     Size  Location     Type
   565 ;;  sign            1    7[COMMON] unsigned char 
   566 ;;  counter         1    6[COMMON] unsigned char 
   567 ;; Return value:  Size  Location     Type
   568 ;;                  2    2[COMMON] int 
   569 ;; Registers used:
   570 ;;		wreg, status,2, status,0, btemp+1
   571 ;; Tracked objects:
   572 ;;		On entry : 100/0
   573 ;;		On exit  : 100/0
   574 ;;		Unchanged: 100/0
   575 ;; Data sizes:     COMMON   BANK0   BANK1
   576 ;;      Params:         4       0       0
   577 ;;      Locals:         2       0       0
   578 ;;      Temps:          0       0       0
   579 ;;      Totals:         6       0       0
   580 ;;Total ram usage:        6 bytes
   581 ;; Hardware stack levels used: 1
   582 ;; Hardware stack levels required when called: 1
   583 ;; This function calls:
   584 ;;		Nothing
   585 ;; This function is called by:
   586 ;;		_display_num
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590     0068                     ___awmod:	
   591                           ;psect for function ___awmod
   592                           
   593                           
   594                           ;incstack = 0
   595                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
   596     0068  01F7               	clrf	___awmod@sign
   597     0069  1FF5               	btfss	___awmod@dividend+1,7
   598     006A  2872               	goto	l736
   599     006B  09F4               	comf	___awmod@dividend,f
   600     006C  09F5               	comf	___awmod@dividend+1,f
   601     006D  0AF4               	incf	___awmod@dividend,f
   602     006E  1903               	skipnz
   603     006F  0AF5               	incf	___awmod@dividend+1,f
   604     0070  01F7               	clrf	___awmod@sign
   605     0071  0AF7               	incf	___awmod@sign,f
   606     0072                     l736:
   607     0072  1FF3               	btfss	___awmod@divisor+1,7
   608     0073  2879               	goto	l740
   609     0074  09F2               	comf	___awmod@divisor,f
   610     0075  09F3               	comf	___awmod@divisor+1,f
   611     0076  0AF2               	incf	___awmod@divisor,f
   612     0077  1903               	skipnz
   613     0078  0AF3               	incf	___awmod@divisor+1,f
   614     0079                     l740:
   615     0079  0872               	movf	___awmod@divisor,w
   616     007A  0473               	iorwf	___awmod@divisor+1,w
   617     007B  1903               	btfsc	3,2
   618     007C  28A6               	goto	l758
   619     007D  01F6               	clrf	___awmod@counter
   620     007E  0AF6               	incf	___awmod@counter,f
   621     007F                     l748:
   622     007F  1BF3               	btfsc	___awmod@divisor+1,7
   623     0080  288D               	goto	l750
   624     0081  3001               	movlw	1
   625     0082                     u485:
   626     0082  1003               	clrc
   627     0083  0DF2               	rlf	___awmod@divisor,f
   628     0084  0DF3               	rlf	___awmod@divisor+1,f
   629     0085  3EFF               	addlw	-1
   630     0086  1D03               	skipz
   631     0087  2882               	goto	u485
   632     0088  3001               	movlw	1
   633     0089  00FF               	movwf	127
   634     008A  087F               	movf	127,w
   635     008B  07F6               	addwf	___awmod@counter,f
   636     008C  287F               	goto	l748
   637     008D                     l750:
   638     008D  0873               	movf	___awmod@divisor+1,w
   639     008E  0275               	subwf	___awmod@dividend+1,w
   640     008F  1D03               	skipz
   641     0090  2893               	goto	u505
   642     0091  0872               	movf	___awmod@divisor,w
   643     0092  0274               	subwf	___awmod@dividend,w
   644     0093                     u505:
   645     0093  1C03               	skipc
   646     0094  289B               	goto	l754
   647     0095  0872               	movf	___awmod@divisor,w
   648     0096  02F4               	subwf	___awmod@dividend,f
   649     0097  0873               	movf	___awmod@divisor+1,w
   650     0098  1C03               	skipc
   651     0099  03F5               	decf	___awmod@dividend+1,f
   652     009A  02F5               	subwf	___awmod@dividend+1,f
   653     009B                     l754:
   654     009B  3001               	movlw	1
   655     009C                     u515:
   656     009C  1003               	clrc
   657     009D  0CF3               	rrf	___awmod@divisor+1,f
   658     009E  0CF2               	rrf	___awmod@divisor,f
   659     009F  3EFF               	addlw	-1
   660     00A0  1D03               	skipz
   661     00A1  289C               	goto	u515
   662     00A2  3001               	movlw	1
   663     00A3  02F6               	subwf	___awmod@counter,f
   664     00A4  1D03               	btfss	3,2
   665     00A5  288D               	goto	l750
   666     00A6                     l758:
   667     00A6  0877               	movf	___awmod@sign,w
   668     00A7  1903               	btfsc	3,2
   669     00A8  28AE               	goto	l762
   670     00A9  09F4               	comf	___awmod@dividend,f
   671     00AA  09F5               	comf	___awmod@dividend+1,f
   672     00AB  0AF4               	incf	___awmod@dividend,f
   673     00AC  1903               	skipnz
   674     00AD  0AF5               	incf	___awmod@dividend+1,f
   675     00AE                     l762:
   676     00AE  0875               	movf	___awmod@dividend+1,w
   677     00AF  00F3               	movwf	?___awmod+1
   678     00B0  0874               	movf	___awmod@dividend,w
   679     00B1  00F2               	movwf	?___awmod
   680     00B2  0008               	return
   681     00B3                     __end_of___awmod:
   682                           
   683                           	psect	text4
   684     000F                     __ptext4:	
   685 ;; *************** function ___awdiv *****************
   686 ;; Defined at:
   687 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\awdiv.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;  divisor         2    2[COMMON] int 
   690 ;;  dividend        2    4[COMMON] int 
   691 ;; Auto vars:     Size  Location     Type
   692 ;;  quotient        2    8[COMMON] int 
   693 ;;  sign            1    7[COMMON] unsigned char 
   694 ;;  counter         1    6[COMMON] unsigned char 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  2    2[COMMON] int 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, btemp+1
   699 ;; Tracked objects:
   700 ;;		On entry : 100/0
   701 ;;		On exit  : 100/0
   702 ;;		Unchanged: 100/0
   703 ;; Data sizes:     COMMON   BANK0   BANK1
   704 ;;      Params:         4       0       0
   705 ;;      Locals:         4       0       0
   706 ;;      Temps:          0       0       0
   707 ;;      Totals:         8       0       0
   708 ;;Total ram usage:        8 bytes
   709 ;; Hardware stack levels used: 1
   710 ;; Hardware stack levels required when called: 1
   711 ;; This function calls:
   712 ;;		Nothing
   713 ;; This function is called by:
   714 ;;		_display_num
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718     000F                     ___awdiv:	
   719                           ;psect for function ___awdiv
   720                           
   721                           
   722                           ;incstack = 0
   723                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
   724     000F  01F7               	clrf	___awdiv@sign
   725     0010  1FF3               	btfss	___awdiv@divisor+1,7
   726     0011  2819               	goto	l692
   727     0012  09F2               	comf	___awdiv@divisor,f
   728     0013  09F3               	comf	___awdiv@divisor+1,f
   729     0014  0AF2               	incf	___awdiv@divisor,f
   730     0015  1903               	skipnz
   731     0016  0AF3               	incf	___awdiv@divisor+1,f
   732     0017  01F7               	clrf	___awdiv@sign
   733     0018  0AF7               	incf	___awdiv@sign,f
   734     0019                     l692:
   735     0019  1FF5               	btfss	___awdiv@dividend+1,7
   736     001A  2824               	goto	l698
   737     001B  09F4               	comf	___awdiv@dividend,f
   738     001C  09F5               	comf	___awdiv@dividend+1,f
   739     001D  0AF4               	incf	___awdiv@dividend,f
   740     001E  1903               	skipnz
   741     001F  0AF5               	incf	___awdiv@dividend+1,f
   742     0020  3001               	movlw	1
   743     0021  00FF               	movwf	127
   744     0022  087F               	movf	127,w
   745     0023  06F7               	xorwf	___awdiv@sign,f
   746     0024                     l698:
   747     0024  01F8               	clrf	___awdiv@quotient
   748     0025  01F9               	clrf	___awdiv@quotient+1
   749     0026  0872               	movf	___awdiv@divisor,w
   750     0027  0473               	iorwf	___awdiv@divisor+1,w
   751     0028  1903               	btfsc	3,2
   752     0029  285B               	goto	l720
   753     002A  01F6               	clrf	___awdiv@counter
   754     002B  0AF6               	incf	___awdiv@counter,f
   755     002C                     l708:
   756     002C  1BF3               	btfsc	___awdiv@divisor+1,7
   757     002D  283A               	goto	l710
   758     002E  3001               	movlw	1
   759     002F                     u385:
   760     002F  1003               	clrc
   761     0030  0DF2               	rlf	___awdiv@divisor,f
   762     0031  0DF3               	rlf	___awdiv@divisor+1,f
   763     0032  3EFF               	addlw	-1
   764     0033  1D03               	skipz
   765     0034  282F               	goto	u385
   766     0035  3001               	movlw	1
   767     0036  00FF               	movwf	127
   768     0037  087F               	movf	127,w
   769     0038  07F6               	addwf	___awdiv@counter,f
   770     0039  282C               	goto	l708
   771     003A                     l710:
   772     003A  3001               	movlw	1
   773     003B                     u405:
   774     003B  1003               	clrc
   775     003C  0DF8               	rlf	___awdiv@quotient,f
   776     003D  0DF9               	rlf	___awdiv@quotient+1,f
   777     003E  3EFF               	addlw	-1
   778     003F  1D03               	skipz
   779     0040  283B               	goto	u405
   780     0041  0873               	movf	___awdiv@divisor+1,w
   781     0042  0275               	subwf	___awdiv@dividend+1,w
   782     0043  1D03               	skipz
   783     0044  2847               	goto	u415
   784     0045  0872               	movf	___awdiv@divisor,w
   785     0046  0274               	subwf	___awdiv@dividend,w
   786     0047                     u415:
   787     0047  1C03               	skipc
   788     0048  2850               	goto	l716
   789     0049  0872               	movf	___awdiv@divisor,w
   790     004A  02F4               	subwf	___awdiv@dividend,f
   791     004B  0873               	movf	___awdiv@divisor+1,w
   792     004C  1C03               	skipc
   793     004D  03F5               	decf	___awdiv@dividend+1,f
   794     004E  02F5               	subwf	___awdiv@dividend+1,f
   795     004F  1478               	bsf	___awdiv@quotient,0
   796     0050                     l716:
   797     0050  3001               	movlw	1
   798     0051                     u425:
   799     0051  1003               	clrc
   800     0052  0CF3               	rrf	___awdiv@divisor+1,f
   801     0053  0CF2               	rrf	___awdiv@divisor,f
   802     0054  3EFF               	addlw	-1
   803     0055  1D03               	skipz
   804     0056  2851               	goto	u425
   805     0057  3001               	movlw	1
   806     0058  02F6               	subwf	___awdiv@counter,f
   807     0059  1D03               	btfss	3,2
   808     005A  283A               	goto	l710
   809     005B                     l720:
   810     005B  0877               	movf	___awdiv@sign,w
   811     005C  1903               	btfsc	3,2
   812     005D  2863               	goto	l724
   813     005E  09F8               	comf	___awdiv@quotient,f
   814     005F  09F9               	comf	___awdiv@quotient+1,f
   815     0060  0AF8               	incf	___awdiv@quotient,f
   816     0061  1903               	skipnz
   817     0062  0AF9               	incf	___awdiv@quotient+1,f
   818     0063                     l724:
   819     0063  0879               	movf	___awdiv@quotient+1,w
   820     0064  00F3               	movwf	?___awdiv+1
   821     0065  0878               	movf	___awdiv@quotient,w
   822     0066  00F2               	movwf	?___awdiv
   823     0067  0008               	return
   824     0068                     __end_of___awdiv:
   825                           
   826                           	psect	text5
   827     0170                     __ptext5:	
   828 ;; *************** function _MAX7219_Setup *****************
   829 ;; Defined at:
   830 ;;		line 106 in file "DigitalRotaryEncoder.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;		None
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  1    wreg      void 
   837 ;; Registers used:
   838 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   839 ;; Tracked objects:
   840 ;;		On entry : B00/0
   841 ;;		On exit  : 100/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMMON   BANK0   BANK1
   844 ;;      Params:         0       0       0
   845 ;;      Locals:         0       0       0
   846 ;;      Temps:          0       0       0
   847 ;;      Totals:         0       0       0
   848 ;;Total ram usage:        0 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; Hardware stack levels required when called: 2
   851 ;; This function calls:
   852 ;;		_SPI_send
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858     0170                     _MAX7219_Setup:	
   859                           ;psect for function _MAX7219_Setup
   860                           
   861                           
   862                           ;DigitalRotaryEncoder.c: 107: SPI_send(0x0F,0x00);
   863                           
   864                           ;incstack = 0
   865                           ; Regs used in _MAX7219_Setup: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   866     0170  01F2               	clrf	SPI_send@data
   867     0171  300F               	movlw	15
   868     0172  20B3               	fcall	_SPI_send
   869                           
   870                           ;DigitalRotaryEncoder.c: 108: SPI_send(0x09,0xFF);
   871     0173  30FF               	movlw	255
   872     0174  00F2               	movwf	SPI_send@data
   873     0175  3009               	movlw	9
   874     0176  20B3               	fcall	_SPI_send
   875                           
   876                           ;DigitalRotaryEncoder.c: 109: SPI_send(0x0A,0x08);
   877     0177  3008               	movlw	8
   878     0178  00F2               	movwf	SPI_send@data
   879     0179  300A               	movlw	10
   880     017A  20B3               	fcall	_SPI_send
   881                           
   882                           ;DigitalRotaryEncoder.c: 110: SPI_send(0x0B,0x07);
   883     017B  3007               	movlw	7
   884     017C  00F2               	movwf	SPI_send@data
   885     017D  300B               	movlw	11
   886     017E  20B3               	fcall	_SPI_send
   887                           
   888                           ;DigitalRotaryEncoder.c: 111: SPI_send(0x0C,0x01);
   889     017F  01F2               	clrf	SPI_send@data
   890     0180  0AF2               	incf	SPI_send@data,f
   891     0181  300C               	movlw	12
   892     0182  20B3               	fcall	_SPI_send
   893     0183  0008               	return
   894     0184                     __end_of_MAX7219_Setup:
   895                           
   896                           	psect	text6
   897     00B3                     __ptext6:	
   898 ;; *************** function _SPI_send *****************
   899 ;; Defined at:
   900 ;;		line 87 in file "DigitalRotaryEncoder.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  addr            1    wreg     unsigned char 
   903 ;;  data            1    2[COMMON] unsigned char 
   904 ;; Auto vars:     Size  Location     Type
   905 ;;  addr            1    4[COMMON] unsigned char 
   906 ;;  i               2    5[COMMON] int 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0, btemp+1
   911 ;; Tracked objects:
   912 ;;		On entry : 100/0
   913 ;;		On exit  : 100/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1
   916 ;;      Params:         1       0       0
   917 ;;      Locals:         3       0       0
   918 ;;      Temps:          1       0       0
   919 ;;      Totals:         5       0       0
   920 ;;Total ram usage:        5 bytes
   921 ;; Hardware stack levels used: 1
   922 ;; Hardware stack levels required when called: 1
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_MAX7219_Setup
   927 ;;		_display_digit
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931     00B3                     _SPI_send:	
   932                           ;psect for function _SPI_send
   933                           
   934                           
   935                           ;incstack = 0
   936                           ; Regs used in _SPI_send: [wreg+status,2+status,0+btemp+1]
   937                           ;SPI_send@addr stored from wreg
   938     00B3  00F4               	movwf	SPI_send@addr
   939                           
   940                           ;DigitalRotaryEncoder.c: 88: int i;;DigitalRotaryEncoder.c: 89: PORTCbits.RC1 = 0;
   941     00B4  1087               	bcf	7,1	;volatile
   942                           
   943                           ;DigitalRotaryEncoder.c: 90: for (i=0; i<8; i++){
   944     00B5  01F5               	clrf	SPI_send@i
   945     00B6  01F6               	clrf	SPI_send@i+1
   946     00B7                     l36:
   947                           
   948                           ;DigitalRotaryEncoder.c: 91: PORTCbits.RC0 = 0;
   949     00B7  1283               	bcf	3,5	;RP0=0, select bank0
   950     00B8  1007               	bcf	7,0	;volatile
   951                           
   952                           ;DigitalRotaryEncoder.c: 92: PORTCbits.RC2 = (addr & 0b10000000) ? 1:0 ;
   953     00B9  1FF4               	btfss	SPI_send@addr,7
   954     00BA  28BE               	goto	u290
   955     00BB  1283               	bcf	3,5	;RP0=0, select bank0
   956     00BC  1507               	bsf	7,2	;volatile
   957     00BD  28C0               	goto	u304
   958     00BE                     u290:
   959     00BE  1283               	bcf	3,5	;RP0=0, select bank0
   960     00BF  1107               	bcf	7,2	;volatile
   961     00C0                     u304:
   962                           
   963                           ;DigitalRotaryEncoder.c: 93: PORTCbits.RC0 = 1;
   964     00C0  1407               	bsf	7,0	;volatile
   965                           
   966                           ;DigitalRotaryEncoder.c: 94: addr = addr << 1;
   967     00C1  0874               	movf	SPI_send@addr,w
   968     00C2  00F3               	movwf	??_SPI_send
   969     00C3  0773               	addwf	??_SPI_send,w
   970     00C4  00F4               	movwf	SPI_send@addr
   971     00C5  3001               	movlw	1
   972     00C6  07F5               	addwf	SPI_send@i,f
   973     00C7  1803               	skipnc
   974     00C8  0AF6               	incf	SPI_send@i+1,f
   975     00C9  3000               	movlw	0
   976     00CA  07F6               	addwf	SPI_send@i+1,f
   977     00CB  0876               	movf	SPI_send@i+1,w
   978     00CC  3A80               	xorlw	128
   979     00CD  00FF               	movwf	127
   980     00CE  3080               	movlw	128
   981     00CF  027F               	subwf	127,w
   982     00D0  1D03               	skipz
   983     00D1  28D4               	goto	u315
   984     00D2  3008               	movlw	8
   985     00D3  0275               	subwf	SPI_send@i,w
   986     00D4                     u315:
   987     00D4  1C03               	skipc
   988     00D5  28B7               	goto	l36
   989                           
   990                           ;DigitalRotaryEncoder.c: 95: };DigitalRotaryEncoder.c: 96: for (i=0; i<8; i++){
   991     00D6  01F5               	clrf	SPI_send@i
   992     00D7  01F6               	clrf	SPI_send@i+1
   993     00D8                     l38:
   994                           
   995                           ;DigitalRotaryEncoder.c: 97: PORTCbits.RC0 = 0;
   996     00D8  1283               	bcf	3,5	;RP0=0, select bank0
   997     00D9  1007               	bcf	7,0	;volatile
   998                           
   999                           ;DigitalRotaryEncoder.c: 98: PORTCbits.RC2 = (data & 0b10000000) ? 1:0 ;
  1000     00DA  1FF2               	btfss	SPI_send@data,7
  1001     00DB  28DF               	goto	u320
  1002     00DC  1283               	bcf	3,5	;RP0=0, select bank0
  1003     00DD  1507               	bsf	7,2	;volatile
  1004     00DE  28E1               	goto	u334
  1005     00DF                     u320:
  1006     00DF  1283               	bcf	3,5	;RP0=0, select bank0
  1007     00E0  1107               	bcf	7,2	;volatile
  1008     00E1                     u334:
  1009                           
  1010                           ;DigitalRotaryEncoder.c: 99: PORTCbits.RC0 = 1;
  1011     00E1  1407               	bsf	7,0	;volatile
  1012                           
  1013                           ;DigitalRotaryEncoder.c: 100: data = data << 1;
  1014     00E2  0872               	movf	SPI_send@data,w
  1015     00E3  00F3               	movwf	??_SPI_send
  1016     00E4  0773               	addwf	??_SPI_send,w
  1017     00E5  00F2               	movwf	SPI_send@data
  1018     00E6  3001               	movlw	1
  1019     00E7  07F5               	addwf	SPI_send@i,f
  1020     00E8  1803               	skipnc
  1021     00E9  0AF6               	incf	SPI_send@i+1,f
  1022     00EA  3000               	movlw	0
  1023     00EB  07F6               	addwf	SPI_send@i+1,f
  1024     00EC  0876               	movf	SPI_send@i+1,w
  1025     00ED  3A80               	xorlw	128
  1026     00EE  00FF               	movwf	127
  1027     00EF  3080               	movlw	128
  1028     00F0  027F               	subwf	127,w
  1029     00F1  1D03               	skipz
  1030     00F2  28F5               	goto	u345
  1031     00F3  3008               	movlw	8
  1032     00F4  0275               	subwf	SPI_send@i,w
  1033     00F5                     u345:
  1034     00F5  1C03               	skipc
  1035     00F6  28D8               	goto	l38
  1036                           
  1037                           ;DigitalRotaryEncoder.c: 101: };DigitalRotaryEncoder.c: 102: PORTCbits.RC0 = 0;
  1038     00F7  1283               	bcf	3,5	;RP0=0, select bank0
  1039     00F8  1007               	bcf	7,0	;volatile
  1040                           
  1041                           ;DigitalRotaryEncoder.c: 103: PORTCbits.RC1 = 1;
  1042     00F9  1487               	bsf	7,1	;volatile
  1043     00FA  0008               	return
  1044     00FB                     __end_of_SPI_send:
  1045                           
  1046                           	psect	text7
  1047     0184                     __ptext7:	
  1048 ;; *************** function _ISR_function *****************
  1049 ;; Defined at:
  1050 ;;		line 47 in file "DigitalRotaryEncoder.c"
  1051 ;; Parameters:    Size  Location     Type
  1052 ;;		None
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		None
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1
  1064 ;;      Params:         0       0       0
  1065 ;;      Locals:         0       0       0
  1066 ;;      Temps:          2       0       0
  1067 ;;      Totals:         2       0       0
  1068 ;;Total ram usage:        2 bytes
  1069 ;; Hardware stack levels used: 1
  1070 ;; This function calls:
  1071 ;;		Nothing
  1072 ;; This function is called by:
  1073 ;;		Interrupt level 1
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077     0184                     _ISR_function:	
  1078                           ;psect for function _ISR_function
  1079                           
  1080                           
  1081                           ;DigitalRotaryEncoder.c: 50: if (INTCONbits.RAIF){
  1082     0184  1C0B               	btfss	11,0	;volatile
  1083     0185  298A               	goto	i1l24
  1084                           
  1085                           ;DigitalRotaryEncoder.c: 51: int_F = 1;
  1086     0186  1283               	bcf	3,5	;RP0=0, select bank0
  1087     0187  01AF               	clrf	_int_F
  1088     0188  0AAF               	incf	_int_F,f
  1089                           
  1090                           ;DigitalRotaryEncoder.c: 52: INTCONbits.RAIF = 0;
  1091     0189  100B               	bcf	11,0	;volatile
  1092     018A                     i1l24:
  1093     018A  0871               	movf	??_ISR_function+1,w
  1094     018B  008A               	movwf	10
  1095     018C  0E70               	swapf	??_ISR_function,w
  1096     018D  0083               	movwf	3
  1097     018E  0EFE               	swapf	126,f
  1098     018F  0E7E               	swapf	126,w
  1099     0190  0009               	retfie
  1100     0191                     __end_of_ISR_function:
  1101     007E                     btemp	set	126	;btemp
  1102     007E                     wtemp0	set	126
  1103                           
  1104                           	psect	intentry
  1105     0004                     __pintentry:	
  1106                           ;incstack = 0
  1107                           ; Regs used in _ISR_function: []
  1108                           
  1109     0004                     interrupt_function:
  1110     007E                     saved_w	set	btemp
  1111     0004  00FE               	movwf	btemp
  1112     0005  0E03               	swapf	3,w
  1113     0006  00F0               	movwf	??_ISR_function
  1114     0007  080A               	movf	10,w
  1115     0008  00F1               	movwf	??_ISR_function+1
  1116     0009  2984               	ljmp	_ISR_function
  1117                           
  1118                           	psect	config
  1119                           
  1120                           ;Config register CONFIG @ 0x2007
  1121                           ;	Oscillator Selection bits
  1122                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  1123                           ;	Watchdog Timer Enable bit
  1124                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1125                           ;	Power-up Timer Enable bit
  1126                           ;	PWRTE = OFF, PWRT disabled
  1127                           ;	MCLR Pin Function Select bit
  1128                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  1129                           ;	Code Protection bit
  1130                           ;	CP = OFF, Program memory code protection is disabled
  1131                           ;	Internal Oscillator Frequency Select bit
  1132                           ;	IOSCFS = 8MHZ, 8 MHz
  1133                           ;	Brown-out Reset Selection bits
  1134                           ;	BOREN = OFF, BOR Disabled
  1135     2007                     	org	8199
  1136     2007  3CD4               	dw	15572

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     15      16
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _display_num->_display_digit
    _display_digit->___awmod
    _MAX7219_Setup->_SPI_send

Critical Paths under _ISR_function in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_display_num

Critical Paths under _ISR_function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_function in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4    2024
                                              4 BANK0     11     7      4
                      _MAX7219_Setup
                        _display_num
 ---------------------------------------------------------------------------------
 (1) _display_num                                          4     2      2    1537
                                              0 BANK0      4     2      2
                            ___awdiv
                            ___awmod
                      _display_digit
 ---------------------------------------------------------------------------------
 (2) _display_digit                                        4     0      4     570
                                              8 COMMON     4     0      4
                           _SPI_send
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     382
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     386
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Setup                                        0     0      0     440
                           _SPI_send
 ---------------------------------------------------------------------------------
 (3) _SPI_send                                             5     4      1     440
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR_function                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX7219_Setup
     _SPI_send
   _display_num
     ___awdiv
     ___awmod
     _display_digit
       _SPI_send
       ___awmod (ARG)

 _ISR_function (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      F      10       4       20.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      1C       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      1C       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sat Jul 22 19:00:44 2023

                     l36 00B7                       l38 00D8             ?_display_num 0020  
           ___awdiv@sign 0077                      l710 003A                      l720 005B  
                    l724 0063                      l716 0050                      l708 002C  
                    l740 0079                      l750 008D                      l736 0072  
                    l808 0112                      l762 00AE                      l754 009B  
                    l692 0019                      l748 007F                      l758 00A6  
                    l774 013E                      l698 0024                      u320 00DF  
                    u304 00C0                      u315 00D4                      u405 003B  
                    u334 00E1                      u415 0047                      u345 00F5  
                    u425 0051                      u505 0093                      u290 00BE  
                    u515 009C                      u385 002F                      u545 016D  
                    u485 0082             ___awmod@sign 0077           ?_display_digit 0078  
            main@counter 002C                     i1l24 018A                     _main 00FB  
                   btemp 007E                     start 000A                    ?_main 0024  
        __end_of___awdiv 0068          __end_of___awmod 00B3                    _ANSEL 0091  
        ___awdiv@divisor 0072          ___awdiv@counter 0076                    _int_F 002F  
                  pclath 000A         __end_of_SPI_send 00FB             display_num@i 0022  
                  status 0003                    wtemp0 007E          __initialization 000B  
           __end_of_main 013A                   ??_main 0028          ??_display_digit 007C  
       ___awdiv@dividend 0074                ??___awdiv 0076                ??___awmod 0076  
       ___awdiv@quotient 0078          ___awmod@divisor 0072          ___awmod@counter 0076  
                 saved_w 007E    __end_of_MAX7219_Setup 0184  __end_of__initialization 000D  
         __pcstackCOMMON 0070             SPI_send@addr 0074             SPI_send@data 0072  
              ?_SPI_send 0072               __pbssBANK0 002F               __pmaintext 00FB  
             __pintentry 0004               ??_SPI_send 0073            ?_ISR_function 0070  
                ___awdiv 000F                  ___awmod 0068                SPI_send@i 0075  
   display_digit@digit_X 0078                  __ptext1 013A                  __ptext2 0191  
                __ptext3 0068                  __ptext4 000F                  __ptext5 0170  
                __ptext6 00B3                  __ptext7 0184         ___awmod@dividend 0074  
                main@dir 002E     end_of_initialization 000D           ??_ISR_function 0070  
         display_num@val 0020                _PORTAbits 0005                _PORTCbits 0007  
              _TRISCbits 0087    __end_of_display_digit 0196            ??_display_num 007C  
    start_initialization 000B     __end_of_ISR_function 0191      __end_of_display_num 0170  
              ___latbits 0000            __pcstackBANK0 0020                 ?___awdiv 0072  
               ?___awmod 0072            _MAX7219_Setup 0170        interrupt_function 0004  
               _IOCAbits 0096              _display_num 013A                 _SPI_send 00B3  
         ?_MAX7219_Setup 0070         display_digit@val 007A             _ISR_function 0184  
               main@argc 0024                 main@argv 0026               _INTCONbits 000B  
        ??_MAX7219_Setup 0077                 intlevel1 0000            _display_digit 0191  
