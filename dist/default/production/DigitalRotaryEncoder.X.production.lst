

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Jul 19 02:23:08 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F616
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 09/02/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F616 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0007                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001B                     	;# 
    76     001C                     	;# 
    77     001E                     	;# 
    78     001F                     	;# 
    79     0081                     	;# 
    80     0085                     	;# 
    81     0087                     	;# 
    82     008C                     	;# 
    83     008E                     	;# 
    84     0090                     	;# 
    85     0091                     	;# 
    86     0092                     	;# 
    87     0095                     	;# 
    88     0095                     	;# 
    89     0096                     	;# 
    90     0096                     	;# 
    91     0099                     	;# 
    92     0099                     	;# 
    93     009A                     	;# 
    94     009E                     	;# 
    95     009F                     	;# 
    96     0005                     _PORTAbits	set	5
    97     0007                     _PORTCbits	set	7
    98     000B                     _INTCONbits	set	11
    99     0096                     _IOCAbits	set	150
   100     0091                     _ANSEL	set	145
   101     0087                     _TRISCbits	set	135
   102                           
   103                           	psect	cinit
   104     000B                     start_initialization:	
   105                           ; #config settings
   106                           
   107     000B                     __initialization:
   108                           
   109                           ; Clear objects allocated to BANK0
   110     000B  1283               	bcf	3,5	;RP0=0, select bank0
   111     000C  01AB               	clrf	__pbssBANK0& (0+127)
   112     000D                     end_of_initialization:	
   113                           ;End of C runtime variable initialization code
   114                           
   115     000D                     __end_of__initialization:
   116     000D  0183               	clrf	3
   117     000E  280F               	ljmp	_main	;jump to C main() function
   118                           
   119                           	psect	bssBANK0
   120     002B                     __pbssBANK0:
   121     002B                     _int_F:
   122     002B                     	ds	1
   123                           
   124                           	psect	cstackCOMMON
   125     0070                     __pcstackCOMMON:
   126     0070                     ?_MAX7219_Setup:
   127     0070                     ?_ISR_function:	
   128                           ; 1 bytes @ 0x0
   129                           
   130     0070                     ??_ISR_function:	
   131                           ; 1 bytes @ 0x0
   132                           
   133                           
   134                           ; 1 bytes @ 0x0
   135     0070                     	ds	2
   136     0072                     ?_SPI_send:
   137     0072                     SPI_send@data:	
   138                           ; 1 bytes @ 0x2
   139                           
   140                           
   141                           ; 1 bytes @ 0x2
   142     0072                     	ds	1
   143     0073                     ??_SPI_send:
   144                           
   145                           ; 1 bytes @ 0x3
   146     0073                     	ds	1
   147     0074                     SPI_send@addr:
   148                           
   149                           ; 1 bytes @ 0x4
   150     0074                     	ds	1
   151     0075                     SPI_send@i:
   152                           
   153                           ; 2 bytes @ 0x5
   154     0075                     	ds	2
   155     0077                     ??_MAX7219_Setup:
   156     0077                     ?_display:	
   157                           ; 1 bytes @ 0x7
   158                           
   159     0077                     display@digit_X:	
   160                           ; 1 bytes @ 0x7
   161                           
   162                           
   163                           ; 2 bytes @ 0x7
   164     0077                     	ds	2
   165     0079                     display@val:
   166                           
   167                           ; 2 bytes @ 0x9
   168     0079                     	ds	2
   169     007B                     ??_display:
   170                           
   171                           	psect	cstackBANK0
   172     0020                     __pcstackBANK0:	
   173                           ; 1 bytes @ 0xB
   174                           
   175     0020                     ?_main:
   176     0020                     main@argc:	
   177                           ; 2 bytes @ 0x0
   178                           
   179                           
   180                           ; 2 bytes @ 0x0
   181     0020                     	ds	2
   182     0022                     main@argv:
   183                           
   184                           ; 2 bytes @ 0x2
   185     0022                     	ds	2
   186     0024                     ??_main:
   187                           
   188                           ; 1 bytes @ 0x4
   189     0024                     	ds	4
   190     0028                     main@counter:
   191                           
   192                           ; 2 bytes @ 0x8
   193     0028                     	ds	2
   194     002A                     main@dir:
   195                           
   196                           ; 1 bytes @ 0xA
   197     002A                     	ds	1
   198                           
   199                           	psect	maintext
   200     000F                     __pmaintext:	
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 55 in file "DigitalRotaryEncoder.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;  argc            2    0[BANK0 ] int 
   209 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   210 ;; Auto vars:     Size  Location     Type
   211 ;;  counter         2    8[BANK0 ] unsigned int 
   212 ;;  dir             1   10[BANK0 ] unsigned char 
   213 ;; Return value:  Size  Location     Type
   214 ;;                  2    0[BANK0 ] int 
   215 ;; Registers used:
   216 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   217 ;; Tracked objects:
   218 ;;		On entry : B00/0
   219 ;;		On exit  : 100/0
   220 ;;		Unchanged: 0/0
   221 ;; Data sizes:     COMMON   BANK0   BANK1
   222 ;;      Params:         0       4       0
   223 ;;      Locals:         0       3       0
   224 ;;      Temps:          0       4       0
   225 ;;      Totals:         0      11       0
   226 ;;Total ram usage:       11 bytes
   227 ;; Hardware stack levels required when called: 3
   228 ;; This function calls:
   229 ;;		_MAX7219_Setup
   230 ;;		_display
   231 ;; This function is called by:
   232 ;;		Startup code after reset
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236     000F                     _main:	
   237                           ;psect for function _main
   238                           
   239                           
   240                           ;DigitalRotaryEncoder.c: 56: TRISCbits.TRISC2 = 0;
   241                           
   242                           ;incstack = 0
   243                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   244     000F  1683               	bsf	3,5	;RP0=1, select bank1
   245     0010  1107               	bcf	7,2	;volatile
   246                           
   247                           ;DigitalRotaryEncoder.c: 57: TRISCbits.TRISC1 = 0;
   248     0011  1087               	bcf	7,1	;volatile
   249                           
   250                           ;DigitalRotaryEncoder.c: 58: TRISCbits.TRISC0 = 0;
   251     0012  1007               	bcf	7,0	;volatile
   252                           
   253                           ;DigitalRotaryEncoder.c: 59: ANSEL = 0;
   254     0013  0191               	clrf	17	;volatile
   255                           
   256                           ;DigitalRotaryEncoder.c: 60: IOCAbits.IOC0 = 1;
   257     0014  1416               	bsf	22,0	;volatile
   258                           
   259                           ;DigitalRotaryEncoder.c: 61: INTCONbits.GIE = 1;
   260     0015  178B               	bsf	11,7	;volatile
   261                           
   262                           ;DigitalRotaryEncoder.c: 62: INTCONbits.RAIE = 1;
   263     0016  158B               	bsf	11,3	;volatile
   264                           
   265                           ;DigitalRotaryEncoder.c: 64: PORTCbits.RC0 = 0;
   266     0017  1283               	bcf	3,5	;RP0=0, select bank0
   267     0018  1007               	bcf	7,0	;volatile
   268                           
   269                           ;DigitalRotaryEncoder.c: 65: PORTCbits.RC1 = 1;
   270     0019  1487               	bsf	7,1	;volatile
   271                           
   272                           ;DigitalRotaryEncoder.c: 66: PORTCbits.RC2 = 0;
   273     001A  1107               	bcf	7,2	;volatile
   274                           
   275                           ;DigitalRotaryEncoder.c: 67: MAX7219_Setup();
   276     001B  20D3               	fcall	_MAX7219_Setup
   277                           
   278                           ;DigitalRotaryEncoder.c: 69: uint16_t counter = 5;
   279     001C  3005               	movlw	5
   280     001D  00A8               	movwf	main@counter
   281     001E  3000               	movlw	0
   282     001F  00A9               	movwf	main@counter+1
   283                           
   284                           ;DigitalRotaryEncoder.c: 70: uint8_t dir;;DigitalRotaryEncoder.c: 71: int_F = 0;
   285     0020  01AB               	clrf	_int_F
   286                           
   287                           ;DigitalRotaryEncoder.c: 72: display(8, 0);
   288     0021  3008               	movlw	8
   289     0022  00F7               	movwf	display@digit_X
   290     0023  3000               	movlw	0
   291     0024  00F8               	movwf	display@digit_X+1
   292     0025  3000               	movlw	0
   293     0026  00F9               	movwf	display@val
   294     0027  00FA               	movwf	display@val+1
   295     0028  20F4               	fcall	_display
   296                           
   297                           ;DigitalRotaryEncoder.c: 73: display(7, 0);
   298     0029  3007               	movlw	7
   299     002A  00F7               	movwf	display@digit_X
   300     002B  3000               	movlw	0
   301     002C  00F8               	movwf	display@digit_X+1
   302     002D  3000               	movlw	0
   303     002E  00F9               	movwf	display@val
   304     002F  00FA               	movwf	display@val+1
   305     0030  20F4               	fcall	_display
   306                           
   307                           ;DigitalRotaryEncoder.c: 74: display(6, 0);
   308     0031  3006               	movlw	6
   309     0032  00F7               	movwf	display@digit_X
   310     0033  3000               	movlw	0
   311     0034  00F8               	movwf	display@digit_X+1
   312     0035  3000               	movlw	0
   313     0036  00F9               	movwf	display@val
   314     0037  00FA               	movwf	display@val+1
   315     0038  20F4               	fcall	_display
   316                           
   317                           ;DigitalRotaryEncoder.c: 75: display(5, 0);
   318     0039  3005               	movlw	5
   319     003A  00F7               	movwf	display@digit_X
   320     003B  3000               	movlw	0
   321     003C  00F8               	movwf	display@digit_X+1
   322     003D  3000               	movlw	0
   323     003E  00F9               	movwf	display@val
   324     003F  00FA               	movwf	display@val+1
   325     0040  20F4               	fcall	_display
   326                           
   327                           ;DigitalRotaryEncoder.c: 76: display(4, 0);
   328     0041  3004               	movlw	4
   329     0042  00F7               	movwf	display@digit_X
   330     0043  3000               	movlw	0
   331     0044  00F8               	movwf	display@digit_X+1
   332     0045  3000               	movlw	0
   333     0046  00F9               	movwf	display@val
   334     0047  00FA               	movwf	display@val+1
   335     0048  20F4               	fcall	_display
   336                           
   337                           ;DigitalRotaryEncoder.c: 77: display(3, 0);
   338     0049  3003               	movlw	3
   339     004A  00F7               	movwf	display@digit_X
   340     004B  3000               	movlw	0
   341     004C  00F8               	movwf	display@digit_X+1
   342     004D  3000               	movlw	0
   343     004E  00F9               	movwf	display@val
   344     004F  00FA               	movwf	display@val+1
   345     0050  20F4               	fcall	_display
   346                           
   347                           ;DigitalRotaryEncoder.c: 78: display(2, 0);
   348     0051  3002               	movlw	2
   349     0052  00F7               	movwf	display@digit_X
   350     0053  3000               	movlw	0
   351     0054  00F8               	movwf	display@digit_X+1
   352     0055  3000               	movlw	0
   353     0056  00F9               	movwf	display@val
   354     0057  00FA               	movwf	display@val+1
   355     0058  20F4               	fcall	_display
   356                           
   357                           ;DigitalRotaryEncoder.c: 79: display(1, 0);
   358     0059  3001               	movlw	1
   359     005A  00F7               	movwf	display@digit_X
   360     005B  3000               	movlw	0
   361     005C  00F8               	movwf	display@digit_X+1
   362     005D  3000               	movlw	0
   363     005E  00F9               	movwf	display@val
   364     005F  00FA               	movwf	display@val+1
   365     0060  20F4               	fcall	_display
   366     0061                     l643:
   367                           
   368                           ;DigitalRotaryEncoder.c: 82: if (int_F){
   369     0061  082B               	movf	_int_F,w
   370     0062  1903               	btfsc	3,2
   371     0063  2861               	goto	l643
   372                           
   373                           ;DigitalRotaryEncoder.c: 83: dir = (PORTAbits.RA0 + PORTAbits.RA1)%2;
   374     0064  0C05               	rrf	5,w	;volatile
   375     0065  3901               	andlw	1
   376     0066  00A4               	movwf	??_main
   377     0067  0805               	movf	5,w	;volatile
   378     0068  3901               	andlw	1
   379     0069  0724               	addwf	??_main,w
   380     006A  3901               	andlw	1
   381     006B  00AA               	movwf	main@dir
   382                           
   383                           ;DigitalRotaryEncoder.c: 84: counter += dir*2 - 1;
   384     006C  082A               	movf	main@dir,w
   385     006D  00A4               	movwf	??_main
   386     006E  01A5               	clrf	??_main+1
   387     006F  1003               	clrc
   388     0070  0DA4               	rlf	??_main,f
   389     0071  0DA5               	rlf	??_main+1,f
   390     0072  0824               	movf	??_main,w
   391     0073  3EFF               	addlw	255
   392     0074  00A6               	movwf	??_main+2
   393     0075  0825               	movf	??_main+1,w
   394     0076  1803               	skipnc
   395     0077  3E01               	addlw	1
   396     0078  3EFF               	addlw	255
   397     0079  00A7               	movwf	??_main+3
   398     007A  0826               	movf	??_main+2,w
   399     007B  07A8               	addwf	main@counter,f
   400     007C  1803               	skipnc
   401     007D  0AA9               	incf	main@counter+1,f
   402     007E  0827               	movf	??_main+3,w
   403     007F  07A9               	addwf	main@counter+1,f
   404                           
   405                           ;DigitalRotaryEncoder.c: 85: display(8, counter);
   406     0080  3008               	movlw	8
   407     0081  00F7               	movwf	display@digit_X
   408     0082  3000               	movlw	0
   409     0083  00F8               	movwf	display@digit_X+1
   410     0084  0829               	movf	main@counter+1,w
   411     0085  00FA               	movwf	display@val+1
   412     0086  0828               	movf	main@counter,w
   413     0087  00F9               	movwf	display@val
   414     0088  20F4               	fcall	_display
   415                           
   416                           ;DigitalRotaryEncoder.c: 86: int_F = 0;
   417     0089  01AB               	clrf	_int_F
   418     008A  2861               	goto	l643
   419     008B                     __end_of_main:
   420                           
   421                           	psect	text1
   422     00F4                     __ptext1:	
   423 ;; *************** function _display *****************
   424 ;; Defined at:
   425 ;;		line 120 in file "DigitalRotaryEncoder.c"
   426 ;; Parameters:    Size  Location     Type
   427 ;;  digit_X         2    7[COMMON] int 
   428 ;;  val             2    9[COMMON] int 
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : 100/0
   437 ;;		On exit  : 100/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0   BANK1
   440 ;;      Params:         4       0       0
   441 ;;      Locals:         0       0       0
   442 ;;      Temps:          0       0       0
   443 ;;      Totals:         4       0       0
   444 ;;Total ram usage:        4 bytes
   445 ;; Hardware stack levels used: 1
   446 ;; Hardware stack levels required when called: 2
   447 ;; This function calls:
   448 ;;		_SPI_send
   449 ;; This function is called by:
   450 ;;		_main
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454     00F4                     _display:	
   455                           ;psect for function _display
   456                           
   457                           
   458                           ;DigitalRotaryEncoder.c: 121: SPI_send(digit_X, val);
   459                           
   460                           ;incstack = 0
   461                           ; Regs used in _display: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   462     00F4  0879               	movf	display@val,w
   463     00F5  00F2               	movwf	SPI_send@data
   464     00F6  0877               	movf	display@digit_X,w
   465     00F7  208B               	fcall	_SPI_send
   466     00F8  0008               	return
   467     00F9                     __end_of_display:
   468                           
   469                           	psect	text2
   470     00D3                     __ptext2:	
   471 ;; *************** function _MAX7219_Setup *****************
   472 ;; Defined at:
   473 ;;		line 112 in file "DigitalRotaryEncoder.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;		None
   476 ;; Auto vars:     Size  Location     Type
   477 ;;		None
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : B00/0
   484 ;;		On exit  : 100/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMMON   BANK0   BANK1
   487 ;;      Params:         0       0       0
   488 ;;      Locals:         0       0       0
   489 ;;      Temps:          0       0       0
   490 ;;      Totals:         0       0       0
   491 ;;Total ram usage:        0 bytes
   492 ;; Hardware stack levels used: 1
   493 ;; Hardware stack levels required when called: 2
   494 ;; This function calls:
   495 ;;		_SPI_send
   496 ;; This function is called by:
   497 ;;		_main
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501     00D3                     _MAX7219_Setup:	
   502                           ;psect for function _MAX7219_Setup
   503                           
   504                           
   505                           ;DigitalRotaryEncoder.c: 113: SPI_send(0x0F,0x00);
   506                           
   507                           ;incstack = 0
   508                           ; Regs used in _MAX7219_Setup: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   509     00D3  01F2               	clrf	SPI_send@data
   510     00D4  300F               	movlw	15
   511     00D5  208B               	fcall	_SPI_send
   512                           
   513                           ;DigitalRotaryEncoder.c: 114: SPI_send(0x09,0xFF);
   514     00D6  30FF               	movlw	255
   515     00D7  00F2               	movwf	SPI_send@data
   516     00D8  3009               	movlw	9
   517     00D9  208B               	fcall	_SPI_send
   518                           
   519                           ;DigitalRotaryEncoder.c: 115: SPI_send(0x0A,0x08);
   520     00DA  3008               	movlw	8
   521     00DB  00F2               	movwf	SPI_send@data
   522     00DC  300A               	movlw	10
   523     00DD  208B               	fcall	_SPI_send
   524                           
   525                           ;DigitalRotaryEncoder.c: 116: SPI_send(0x0B,0x07);
   526     00DE  3007               	movlw	7
   527     00DF  00F2               	movwf	SPI_send@data
   528     00E0  300B               	movlw	11
   529     00E1  208B               	fcall	_SPI_send
   530                           
   531                           ;DigitalRotaryEncoder.c: 117: SPI_send(0x0C,0x01);
   532     00E2  01F2               	clrf	SPI_send@data
   533     00E3  0AF2               	incf	SPI_send@data,f
   534     00E4  300C               	movlw	12
   535     00E5  208B               	fcall	_SPI_send
   536     00E6  0008               	return
   537     00E7                     __end_of_MAX7219_Setup:
   538                           
   539                           	psect	text3
   540     008B                     __ptext3:	
   541 ;; *************** function _SPI_send *****************
   542 ;; Defined at:
   543 ;;		line 93 in file "DigitalRotaryEncoder.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;  addr            1    wreg     unsigned char 
   546 ;;  data            1    2[COMMON] unsigned char 
   547 ;; Auto vars:     Size  Location     Type
   548 ;;  addr            1    4[COMMON] unsigned char 
   549 ;;  i               2    5[COMMON] int 
   550 ;; Return value:  Size  Location     Type
   551 ;;                  1    wreg      void 
   552 ;; Registers used:
   553 ;;		wreg, status,2, status,0, btemp+1
   554 ;; Tracked objects:
   555 ;;		On entry : 100/0
   556 ;;		On exit  : 100/0
   557 ;;		Unchanged: 0/0
   558 ;; Data sizes:     COMMON   BANK0   BANK1
   559 ;;      Params:         1       0       0
   560 ;;      Locals:         3       0       0
   561 ;;      Temps:          1       0       0
   562 ;;      Totals:         5       0       0
   563 ;;Total ram usage:        5 bytes
   564 ;; Hardware stack levels used: 1
   565 ;; Hardware stack levels required when called: 1
   566 ;; This function calls:
   567 ;;		Nothing
   568 ;; This function is called by:
   569 ;;		_MAX7219_Setup
   570 ;;		_display
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574     008B                     _SPI_send:	
   575                           ;psect for function _SPI_send
   576                           
   577                           
   578                           ;incstack = 0
   579                           ; Regs used in _SPI_send: [wreg+status,2+status,0+btemp+1]
   580                           ;SPI_send@addr stored from wreg
   581     008B  00F4               	movwf	SPI_send@addr
   582                           
   583                           ;DigitalRotaryEncoder.c: 94: int i;;DigitalRotaryEncoder.c: 95: PORTCbits.RC1 = 0;
   584     008C  1087               	bcf	7,1	;volatile
   585                           
   586                           ;DigitalRotaryEncoder.c: 96: for (i=0; i<8; i++){
   587     008D  01F5               	clrf	SPI_send@i
   588     008E  01F6               	clrf	SPI_send@i+1
   589     008F                     l36:
   590                           
   591                           ;DigitalRotaryEncoder.c: 97: PORTCbits.RC0 = 0;
   592     008F  1283               	bcf	3,5	;RP0=0, select bank0
   593     0090  1007               	bcf	7,0	;volatile
   594                           
   595                           ;DigitalRotaryEncoder.c: 98: PORTCbits.RC2 = (addr & 0b10000000) ? 1:0 ;
   596     0091  1FF4               	btfss	SPI_send@addr,7
   597     0092  2896               	goto	u90
   598     0093  1283               	bcf	3,5	;RP0=0, select bank0
   599     0094  1507               	bsf	7,2	;volatile
   600     0095  2898               	goto	u104
   601     0096                     u90:
   602     0096  1283               	bcf	3,5	;RP0=0, select bank0
   603     0097  1107               	bcf	7,2	;volatile
   604     0098                     u104:
   605                           
   606                           ;DigitalRotaryEncoder.c: 99: PORTCbits.RC0 = 1;
   607     0098  1407               	bsf	7,0	;volatile
   608                           
   609                           ;DigitalRotaryEncoder.c: 100: addr = addr << 1;
   610     0099  0874               	movf	SPI_send@addr,w
   611     009A  00F3               	movwf	??_SPI_send
   612     009B  0773               	addwf	??_SPI_send,w
   613     009C  00F4               	movwf	SPI_send@addr
   614     009D  3001               	movlw	1
   615     009E  07F5               	addwf	SPI_send@i,f
   616     009F  1803               	skipnc
   617     00A0  0AF6               	incf	SPI_send@i+1,f
   618     00A1  3000               	movlw	0
   619     00A2  07F6               	addwf	SPI_send@i+1,f
   620     00A3  0876               	movf	SPI_send@i+1,w
   621     00A4  3A80               	xorlw	128
   622     00A5  00FF               	movwf	127
   623     00A6  3080               	movlw	128
   624     00A7  027F               	subwf	127,w
   625     00A8  1D03               	skipz
   626     00A9  28AC               	goto	u115
   627     00AA  3008               	movlw	8
   628     00AB  0275               	subwf	SPI_send@i,w
   629     00AC                     u115:
   630     00AC  1C03               	skipc
   631     00AD  288F               	goto	l36
   632                           
   633                           ;DigitalRotaryEncoder.c: 101: };DigitalRotaryEncoder.c: 102: for (i=0; i<8; i++){
   634     00AE  01F5               	clrf	SPI_send@i
   635     00AF  01F6               	clrf	SPI_send@i+1
   636     00B0                     l38:
   637                           
   638                           ;DigitalRotaryEncoder.c: 103: PORTCbits.RC0 = 0;
   639     00B0  1283               	bcf	3,5	;RP0=0, select bank0
   640     00B1  1007               	bcf	7,0	;volatile
   641                           
   642                           ;DigitalRotaryEncoder.c: 104: PORTCbits.RC2 = (data & 0b10000000) ? 1:0 ;
   643     00B2  1FF2               	btfss	SPI_send@data,7
   644     00B3  28B7               	goto	u120
   645     00B4  1283               	bcf	3,5	;RP0=0, select bank0
   646     00B5  1507               	bsf	7,2	;volatile
   647     00B6  28B9               	goto	u134
   648     00B7                     u120:
   649     00B7  1283               	bcf	3,5	;RP0=0, select bank0
   650     00B8  1107               	bcf	7,2	;volatile
   651     00B9                     u134:
   652                           
   653                           ;DigitalRotaryEncoder.c: 105: PORTCbits.RC0 = 1;
   654     00B9  1407               	bsf	7,0	;volatile
   655                           
   656                           ;DigitalRotaryEncoder.c: 106: data = data << 1;
   657     00BA  0872               	movf	SPI_send@data,w
   658     00BB  00F3               	movwf	??_SPI_send
   659     00BC  0773               	addwf	??_SPI_send,w
   660     00BD  00F2               	movwf	SPI_send@data
   661     00BE  3001               	movlw	1
   662     00BF  07F5               	addwf	SPI_send@i,f
   663     00C0  1803               	skipnc
   664     00C1  0AF6               	incf	SPI_send@i+1,f
   665     00C2  3000               	movlw	0
   666     00C3  07F6               	addwf	SPI_send@i+1,f
   667     00C4  0876               	movf	SPI_send@i+1,w
   668     00C5  3A80               	xorlw	128
   669     00C6  00FF               	movwf	127
   670     00C7  3080               	movlw	128
   671     00C8  027F               	subwf	127,w
   672     00C9  1D03               	skipz
   673     00CA  28CD               	goto	u145
   674     00CB  3008               	movlw	8
   675     00CC  0275               	subwf	SPI_send@i,w
   676     00CD                     u145:
   677     00CD  1C03               	skipc
   678     00CE  28B0               	goto	l38
   679                           
   680                           ;DigitalRotaryEncoder.c: 107: };DigitalRotaryEncoder.c: 108: PORTCbits.RC0 = 0;
   681     00CF  1283               	bcf	3,5	;RP0=0, select bank0
   682     00D0  1007               	bcf	7,0	;volatile
   683                           
   684                           ;DigitalRotaryEncoder.c: 109: PORTCbits.RC1 = 1;
   685     00D1  1487               	bsf	7,1	;volatile
   686     00D2  0008               	return
   687     00D3                     __end_of_SPI_send:
   688                           
   689                           	psect	text4
   690     00E7                     __ptext4:	
   691 ;; *************** function _ISR_function *****************
   692 ;; Defined at:
   693 ;;		line 46 in file "DigitalRotaryEncoder.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		None
   702 ;; Tracked objects:
   703 ;;		On entry : 0/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMMON   BANK0   BANK1
   707 ;;      Params:         0       0       0
   708 ;;      Locals:         0       0       0
   709 ;;      Temps:          2       0       0
   710 ;;      Totals:         2       0       0
   711 ;;Total ram usage:        2 bytes
   712 ;; Hardware stack levels used: 1
   713 ;; This function calls:
   714 ;;		Nothing
   715 ;; This function is called by:
   716 ;;		Interrupt level 1
   717 ;; This function uses a non-reentrant model
   718 ;;
   719                           
   720     00E7                     _ISR_function:	
   721                           ;psect for function _ISR_function
   722                           
   723                           
   724                           ;DigitalRotaryEncoder.c: 49: if (INTCONbits.RAIF){
   725     00E7  1C0B               	btfss	11,0	;volatile
   726     00E8  28ED               	goto	i1l24
   727                           
   728                           ;DigitalRotaryEncoder.c: 50: int_F = 1;
   729     00E9  1283               	bcf	3,5	;RP0=0, select bank0
   730     00EA  01AB               	clrf	_int_F
   731     00EB  0AAB               	incf	_int_F,f
   732                           
   733                           ;DigitalRotaryEncoder.c: 51: INTCONbits.RAIF = 0;
   734     00EC  100B               	bcf	11,0	;volatile
   735     00ED                     i1l24:
   736     00ED  0871               	movf	??_ISR_function+1,w
   737     00EE  008A               	movwf	10
   738     00EF  0E70               	swapf	??_ISR_function,w
   739     00F0  0083               	movwf	3
   740     00F1  0EFE               	swapf	126,f
   741     00F2  0E7E               	swapf	126,w
   742     00F3  0009               	retfie
   743     00F4                     __end_of_ISR_function:
   744     007E                     btemp	set	126	;btemp
   745     007E                     wtemp0	set	126
   746                           
   747                           	psect	intentry
   748     0004                     __pintentry:	
   749                           ;incstack = 0
   750                           ; Regs used in _ISR_function: []
   751                           
   752     0004                     interrupt_function:
   753     007E                     saved_w	set	btemp
   754     0004  00FE               	movwf	btemp
   755     0005  0E03               	swapf	3,w
   756     0006  00F0               	movwf	??_ISR_function
   757     0007  080A               	movf	10,w
   758     0008  00F1               	movwf	??_ISR_function+1
   759     0009  28E7               	ljmp	_ISR_function
   760                           
   761                           	psect	config
   762                           
   763                           ;Config register CONFIG @ 0x2007
   764                           ;	Oscillator Selection bits
   765                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
   766                           ;	Watchdog Timer Enable bit
   767                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   768                           ;	Power-up Timer Enable bit
   769                           ;	PWRTE = OFF, PWRT disabled
   770                           ;	MCLR Pin Function Select bit
   771                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
   772                           ;	Code Protection bit
   773                           ;	CP = OFF, Program memory code protection is disabled
   774                           ;	Internal Oscillator Frequency Select bit
   775                           ;	IOSCFS = 8MHZ, 8 MHz
   776                           ;	Brown-out Reset Selection bits
   777                           ;	BOREN = OFF, BOR Disabled
   778     2007                     	org	8199
   779     2007  3CD4               	dw	15572

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     11      12
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_display
    _display->_SPI_send
    _MAX7219_Setup->_SPI_send

Critical Paths under _ISR_function in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_function in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4    1745
                                              0 BANK0     11     7      4
                      _MAX7219_Setup
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              4     0      4    1258
                                              7 COMMON     4     0      4
                           _SPI_send
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Setup                                        0     0      0     440
                           _SPI_send
 ---------------------------------------------------------------------------------
 (2) _SPI_send                                             5     4      1     440
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_function                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX7219_Setup
     _SPI_send
   _display
     _SPI_send

 _ISR_function (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      B       C       4       15.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      17       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      17       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Jul 19 02:23:08 2023

                     l36 008F                       l38 00B0                       u90 0096  
                    l643 0061                      u120 00B7                      u104 0098  
                    u115 00AC                      u134 00B9                      u145 00CD  
            main@counter 0028                     i1l24 00ED                     _main 000F  
                   btemp 007E                     start 000A                    ?_main 0020  
                  _ANSEL 0091          __end_of_display 00F9                    _int_F 002B  
                  pclath 000A         __end_of_SPI_send 00D3                    status 0003  
                  wtemp0 007E          __initialization 000B             __end_of_main 008B  
                 ??_main 0024                ??_display 007B                   saved_w 007E  
  __end_of_MAX7219_Setup 00E7  __end_of__initialization 000D           __pcstackCOMMON 0070  
           SPI_send@addr 0074             SPI_send@data 0072                ?_SPI_send 0072  
             __pbssBANK0 002B               __pmaintext 000F               __pintentry 0004  
             ??_SPI_send 0073            ?_ISR_function 0070           display@digit_X 0077  
              SPI_send@i 0075                  __ptext1 00F4                  __ptext2 00D3  
                __ptext3 008B                  __ptext4 00E7                  _display 00F4  
                main@dir 002A     end_of_initialization 000D           ??_ISR_function 0070  
              _PORTAbits 0005                _PORTCbits 0007                _TRISCbits 0087  
             display@val 0079      start_initialization 000B     __end_of_ISR_function 00F4  
              ___latbits 0000            __pcstackBANK0 0020                 ?_display 0077  
          _MAX7219_Setup 00D3        interrupt_function 0004                 _IOCAbits 0096  
               _SPI_send 008B           ?_MAX7219_Setup 0070             _ISR_function 00E7  
               main@argc 0020                 main@argv 0022               _INTCONbits 000B  
        ??_MAX7219_Setup 0077                 intlevel1 0000  
