

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Wed Jul 19 01:57:30 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F616
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 09/02/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F616 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0007                     	;# 
    58     000A                     	;# 
    59     000B                     	;# 
    60     000C                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0013                     	;# 
    69     0014                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001B                     	;# 
    76     001C                     	;# 
    77     001E                     	;# 
    78     001F                     	;# 
    79     0081                     	;# 
    80     0085                     	;# 
    81     0087                     	;# 
    82     008C                     	;# 
    83     008E                     	;# 
    84     0090                     	;# 
    85     0091                     	;# 
    86     0092                     	;# 
    87     0095                     	;# 
    88     0095                     	;# 
    89     0096                     	;# 
    90     0096                     	;# 
    91     0099                     	;# 
    92     0099                     	;# 
    93     009A                     	;# 
    94     009E                     	;# 
    95     009F                     	;# 
    96     0005                     _PORTAbits	set	5
    97     0007                     _PORTCbits	set	7
    98     000B                     _INTCONbits	set	11
    99     0096                     _IOCAbits	set	150
   100     0091                     _ANSEL	set	145
   101     0087                     _TRISCbits	set	135
   102                           
   103                           	psect	cinit
   104     000B                     start_initialization:	
   105                           ; #config settings
   106                           
   107     000B                     __initialization:
   108                           
   109                           ; Clear objects allocated to BANK0
   110     000B  1283               	bcf	3,5	;RP0=0, select bank0
   111     000C  01AB               	clrf	__pbssBANK0& (0+127)
   112     000D                     end_of_initialization:	
   113                           ;End of C runtime variable initialization code
   114                           
   115     000D                     __end_of__initialization:
   116     000D  0183               	clrf	3
   117     000E  280F               	ljmp	_main	;jump to C main() function
   118                           
   119                           	psect	bssBANK0
   120     002B                     __pbssBANK0:
   121     002B                     _int_F:
   122     002B                     	ds	1
   123                           
   124                           	psect	cstackCOMMON
   125     0070                     __pcstackCOMMON:
   126     0070                     ?_MAX7219_Setup:
   127     0070                     ?_ISR_function:	
   128                           ; 1 bytes @ 0x0
   129                           
   130     0070                     ??_ISR_function:	
   131                           ; 1 bytes @ 0x0
   132                           
   133                           
   134                           ; 1 bytes @ 0x0
   135     0070                     	ds	2
   136     0072                     ?_SPI_send:
   137     0072                     SPI_send@data:	
   138                           ; 1 bytes @ 0x2
   139                           
   140                           
   141                           ; 1 bytes @ 0x2
   142     0072                     	ds	1
   143     0073                     ??_SPI_send:
   144                           
   145                           ; 1 bytes @ 0x3
   146     0073                     	ds	1
   147     0074                     SPI_send@addr:
   148                           
   149                           ; 1 bytes @ 0x4
   150     0074                     	ds	1
   151     0075                     SPI_send@i:
   152                           
   153                           ; 2 bytes @ 0x5
   154     0075                     	ds	2
   155     0077                     ??_MAX7219_Setup:
   156     0077                     ?_display:	
   157                           ; 1 bytes @ 0x7
   158                           
   159     0077                     display@digit_X:	
   160                           ; 1 bytes @ 0x7
   161                           
   162                           
   163                           ; 2 bytes @ 0x7
   164     0077                     	ds	2
   165     0079                     display@val:
   166                           
   167                           ; 2 bytes @ 0x9
   168     0079                     	ds	2
   169     007B                     ??_display:
   170                           
   171                           	psect	cstackBANK0
   172     0020                     __pcstackBANK0:	
   173                           ; 1 bytes @ 0xB
   174                           
   175     0020                     ?_main:
   176     0020                     main@argc:	
   177                           ; 2 bytes @ 0x0
   178                           
   179                           
   180                           ; 2 bytes @ 0x0
   181     0020                     	ds	2
   182     0022                     main@argv:
   183                           
   184                           ; 2 bytes @ 0x2
   185     0022                     	ds	2
   186     0024                     ??_main:
   187                           
   188                           ; 1 bytes @ 0x4
   189     0024                     	ds	4
   190     0028                     main@counter:
   191                           
   192                           ; 2 bytes @ 0x8
   193     0028                     	ds	2
   194     002A                     main@dir:
   195                           
   196                           ; 1 bytes @ 0xA
   197     002A                     	ds	1
   198                           
   199                           	psect	maintext
   200     000F                     __pmaintext:	
   201 ;;
   202 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   203 ;;
   204 ;; *************** function _main *****************
   205 ;; Defined at:
   206 ;;		line 55 in file "DigitalRotaryEncoder.c"
   207 ;; Parameters:    Size  Location     Type
   208 ;;  argc            2    0[BANK0 ] int 
   209 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   210 ;; Auto vars:     Size  Location     Type
   211 ;;  counter         2    8[BANK0 ] unsigned int 
   212 ;;  dir             1   10[BANK0 ] unsigned char 
   213 ;; Return value:  Size  Location     Type
   214 ;;                  2    0[BANK0 ] int 
   215 ;; Registers used:
   216 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   217 ;; Tracked objects:
   218 ;;		On entry : B00/0
   219 ;;		On exit  : 100/0
   220 ;;		Unchanged: 0/0
   221 ;; Data sizes:     COMMON   BANK0   BANK1
   222 ;;      Params:         0       4       0
   223 ;;      Locals:         0       3       0
   224 ;;      Temps:          0       4       0
   225 ;;      Totals:         0      11       0
   226 ;;Total ram usage:       11 bytes
   227 ;; Hardware stack levels required when called: 3
   228 ;; This function calls:
   229 ;;		_MAX7219_Setup
   230 ;;		_display
   231 ;; This function is called by:
   232 ;;		Startup code after reset
   233 ;; This function uses a non-reentrant model
   234 ;;
   235                           
   236     000F                     _main:	
   237                           ;psect for function _main
   238                           
   239                           
   240                           ;DigitalRotaryEncoder.c: 56: TRISCbits.TRISC2 = 0;
   241                           
   242                           ;incstack = 0
   243                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   244     000F  1683               	bsf	3,5	;RP0=1, select bank1
   245     0010  1107               	bcf	7,2	;volatile
   246                           
   247                           ;DigitalRotaryEncoder.c: 57: TRISCbits.TRISC1 = 0;
   248     0011  1087               	bcf	7,1	;volatile
   249                           
   250                           ;DigitalRotaryEncoder.c: 58: TRISCbits.TRISC0 = 0;
   251     0012  1007               	bcf	7,0	;volatile
   252                           
   253                           ;DigitalRotaryEncoder.c: 59: ANSEL = 0;
   254     0013  0191               	clrf	17	;volatile
   255                           
   256                           ;DigitalRotaryEncoder.c: 60: IOCAbits.IOC0 = 1;
   257     0014  1416               	bsf	22,0	;volatile
   258                           
   259                           ;DigitalRotaryEncoder.c: 61: INTCONbits.GIE = 1;
   260     0015  178B               	bsf	11,7	;volatile
   261                           
   262                           ;DigitalRotaryEncoder.c: 62: INTCONbits.RAIE = 1;
   263     0016  158B               	bsf	11,3	;volatile
   264                           
   265                           ;DigitalRotaryEncoder.c: 64: PORTCbits.RC0 = 0;
   266     0017  1283               	bcf	3,5	;RP0=0, select bank0
   267     0018  1007               	bcf	7,0	;volatile
   268                           
   269                           ;DigitalRotaryEncoder.c: 65: PORTCbits.RC1 = 1;
   270     0019  1487               	bsf	7,1	;volatile
   271                           
   272                           ;DigitalRotaryEncoder.c: 66: PORTCbits.RC2 = 0;
   273     001A  1107               	bcf	7,2	;volatile
   274                           
   275                           ;DigitalRotaryEncoder.c: 67: MAX7219_Setup();
   276     001B  20DD               	fcall	_MAX7219_Setup
   277                           
   278                           ;DigitalRotaryEncoder.c: 69: uint16_t counter = 5;
   279     001C  3005               	movlw	5
   280     001D  00A8               	movwf	main@counter
   281     001E  3000               	movlw	0
   282     001F  00A9               	movwf	main@counter+1
   283                           
   284                           ;DigitalRotaryEncoder.c: 70: uint8_t dir;;DigitalRotaryEncoder.c: 71: int_F = 0;
   285     0020  01AB               	clrf	_int_F
   286                           
   287                           ;DigitalRotaryEncoder.c: 72: display(8, 0);
   288     0021  3008               	movlw	8
   289     0022  00F7               	movwf	display@digit_X
   290     0023  3000               	movlw	0
   291     0024  00F8               	movwf	display@digit_X+1
   292     0025  3000               	movlw	0
   293     0026  00F9               	movwf	display@val
   294     0027  00FA               	movwf	display@val+1
   295     0028  20FE               	fcall	_display
   296                           
   297                           ;DigitalRotaryEncoder.c: 73: display(7, 0);
   298     0029  3007               	movlw	7
   299     002A  00F7               	movwf	display@digit_X
   300     002B  3000               	movlw	0
   301     002C  00F8               	movwf	display@digit_X+1
   302     002D  3000               	movlw	0
   303     002E  00F9               	movwf	display@val
   304     002F  00FA               	movwf	display@val+1
   305     0030  20FE               	fcall	_display
   306                           
   307                           ;DigitalRotaryEncoder.c: 74: display(6, 0);
   308     0031  3006               	movlw	6
   309     0032  00F7               	movwf	display@digit_X
   310     0033  3000               	movlw	0
   311     0034  00F8               	movwf	display@digit_X+1
   312     0035  3000               	movlw	0
   313     0036  00F9               	movwf	display@val
   314     0037  00FA               	movwf	display@val+1
   315     0038  20FE               	fcall	_display
   316                           
   317                           ;DigitalRotaryEncoder.c: 75: display(5, 0);
   318     0039  3005               	movlw	5
   319     003A  00F7               	movwf	display@digit_X
   320     003B  3000               	movlw	0
   321     003C  00F8               	movwf	display@digit_X+1
   322     003D  3000               	movlw	0
   323     003E  00F9               	movwf	display@val
   324     003F  00FA               	movwf	display@val+1
   325     0040  20FE               	fcall	_display
   326                           
   327                           ;DigitalRotaryEncoder.c: 76: display(4, 0);
   328     0041  3004               	movlw	4
   329     0042  00F7               	movwf	display@digit_X
   330     0043  3000               	movlw	0
   331     0044  00F8               	movwf	display@digit_X+1
   332     0045  3000               	movlw	0
   333     0046  00F9               	movwf	display@val
   334     0047  00FA               	movwf	display@val+1
   335     0048  20FE               	fcall	_display
   336                           
   337                           ;DigitalRotaryEncoder.c: 77: display(3, 0);
   338     0049  3003               	movlw	3
   339     004A  00F7               	movwf	display@digit_X
   340     004B  3000               	movlw	0
   341     004C  00F8               	movwf	display@digit_X+1
   342     004D  3000               	movlw	0
   343     004E  00F9               	movwf	display@val
   344     004F  00FA               	movwf	display@val+1
   345     0050  20FE               	fcall	_display
   346                           
   347                           ;DigitalRotaryEncoder.c: 78: display(2, 0);
   348     0051  3002               	movlw	2
   349     0052  00F7               	movwf	display@digit_X
   350     0053  3000               	movlw	0
   351     0054  00F8               	movwf	display@digit_X+1
   352     0055  3000               	movlw	0
   353     0056  00F9               	movwf	display@val
   354     0057  00FA               	movwf	display@val+1
   355     0058  20FE               	fcall	_display
   356                           
   357                           ;DigitalRotaryEncoder.c: 79: display(1, 0);
   358     0059  3001               	movlw	1
   359     005A  00F7               	movwf	display@digit_X
   360     005B  3000               	movlw	0
   361     005C  00F8               	movwf	display@digit_X+1
   362     005D  3000               	movlw	0
   363     005E  00F9               	movwf	display@val
   364     005F  00FA               	movwf	display@val+1
   365     0060  20FE               	fcall	_display
   366     0061                     l668:
   367                           
   368                           ;DigitalRotaryEncoder.c: 81: if (int_F){
   369     0061  082B               	movf	_int_F,w
   370     0062  1903               	btfsc	3,2
   371     0063  2861               	goto	l668
   372                           
   373                           ;DigitalRotaryEncoder.c: 82: if (PORTAbits.RA0 && PORTAbits.RA1){
   374     0064  1C05               	btfss	5,0	;volatile
   375     0065  2868               	goto	l31
   376     0066  1885               	btfsc	5,1	;volatile
   377     0067  2874               	goto	l674
   378     0068                     l31:	
   379                           ;DigitalRotaryEncoder.c: 84: }
   380                           
   381                           
   382                           ;DigitalRotaryEncoder.c: 85: else if (PORTAbits.RA0 && !PORTAbits.RA1){
   383     0068  1805               	btfsc	5,0	;volatile
   384     0069  1885               	btfsc	5,1	;volatile
   385     006A  286D               	goto	l33
   386     006B                     l678:
   387                           
   388                           ;DigitalRotaryEncoder.c: 86: dir = 0;
   389     006B  01AA               	clrf	main@dir
   390                           
   391                           ;DigitalRotaryEncoder.c: 87: }
   392     006C  2876               	goto	l688
   393     006D                     l33:
   394                           
   395                           ;DigitalRotaryEncoder.c: 88: else if (!PORTAbits.RA0 && PORTAbits.RA1){
   396     006D  1805               	btfsc	5,0	;volatile
   397     006E  2871               	goto	l35
   398     006F  1885               	btfsc	5,1	;volatile
   399     0070  286B               	goto	l678
   400     0071                     l35:
   401                           
   402                           ;DigitalRotaryEncoder.c: 91: else if (!PORTAbits.RA0 && !PORTAbits.RA1){
   403     0071  1C05               	btfss	5,0	;volatile
   404     0072  1885               	btfsc	5,1	;volatile
   405     0073  2876               	goto	l688
   406     0074                     l674:
   407                           
   408                           ;DigitalRotaryEncoder.c: 83: dir = 1;
   409     0074  01AA               	clrf	main@dir
   410     0075  0AAA               	incf	main@dir,f
   411     0076                     l688:
   412                           
   413                           ;DigitalRotaryEncoder.c: 93: };DigitalRotaryEncoder.c: 94: counter += (dir*2-1);
   414     0076  082A               	movf	main@dir,w
   415     0077  00A4               	movwf	??_main
   416     0078  01A5               	clrf	??_main+1
   417     0079  1003               	clrc
   418     007A  0DA4               	rlf	??_main,f
   419     007B  0DA5               	rlf	??_main+1,f
   420     007C  0824               	movf	??_main,w
   421     007D  3EFF               	addlw	255
   422     007E  00A6               	movwf	??_main+2
   423     007F  0825               	movf	??_main+1,w
   424     0080  1803               	skipnc
   425     0081  3E01               	addlw	1
   426     0082  3EFF               	addlw	255
   427     0083  00A7               	movwf	??_main+3
   428     0084  0826               	movf	??_main+2,w
   429     0085  07A8               	addwf	main@counter,f
   430     0086  1803               	skipnc
   431     0087  0AA9               	incf	main@counter+1,f
   432     0088  0827               	movf	??_main+3,w
   433     0089  07A9               	addwf	main@counter+1,f
   434                           
   435                           ;DigitalRotaryEncoder.c: 95: display(2, counter);
   436     008A  3002               	movlw	2
   437     008B  00F7               	movwf	display@digit_X
   438     008C  3000               	movlw	0
   439     008D  00F8               	movwf	display@digit_X+1
   440     008E  0829               	movf	main@counter+1,w
   441     008F  00FA               	movwf	display@val+1
   442     0090  0828               	movf	main@counter,w
   443     0091  00F9               	movwf	display@val
   444     0092  20FE               	fcall	_display
   445                           
   446                           ;DigitalRotaryEncoder.c: 96: int_F = 0;
   447     0093  01AB               	clrf	_int_F
   448     0094  2861               	goto	l668
   449     0095                     __end_of_main:
   450                           
   451                           	psect	text1
   452     00FE                     __ptext1:	
   453 ;; *************** function _display *****************
   454 ;; Defined at:
   455 ;;		line 130 in file "DigitalRotaryEncoder.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;  digit_X         2    7[COMMON] int 
   458 ;;  val             2    9[COMMON] int 
   459 ;; Auto vars:     Size  Location     Type
   460 ;;		None
   461 ;; Return value:  Size  Location     Type
   462 ;;                  1    wreg      void 
   463 ;; Registers used:
   464 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   465 ;; Tracked objects:
   466 ;;		On entry : 100/0
   467 ;;		On exit  : 100/0
   468 ;;		Unchanged: 0/0
   469 ;; Data sizes:     COMMON   BANK0   BANK1
   470 ;;      Params:         4       0       0
   471 ;;      Locals:         0       0       0
   472 ;;      Temps:          0       0       0
   473 ;;      Totals:         4       0       0
   474 ;;Total ram usage:        4 bytes
   475 ;; Hardware stack levels used: 1
   476 ;; Hardware stack levels required when called: 2
   477 ;; This function calls:
   478 ;;		_SPI_send
   479 ;; This function is called by:
   480 ;;		_main
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484     00FE                     _display:	
   485                           ;psect for function _display
   486                           
   487                           
   488                           ;DigitalRotaryEncoder.c: 131: SPI_send(digit_X, val);
   489                           
   490                           ;incstack = 0
   491                           ; Regs used in _display: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   492     00FE  0879               	movf	display@val,w
   493     00FF  00F2               	movwf	SPI_send@data
   494     0100  0877               	movf	display@digit_X,w
   495     0101  2095               	fcall	_SPI_send
   496     0102  0008               	return
   497     0103                     __end_of_display:
   498                           
   499                           	psect	text2
   500     00DD                     __ptext2:	
   501 ;; *************** function _MAX7219_Setup *****************
   502 ;; Defined at:
   503 ;;		line 122 in file "DigitalRotaryEncoder.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : B00/0
   514 ;;		On exit  : 100/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMMON   BANK0   BANK1
   517 ;;      Params:         0       0       0
   518 ;;      Locals:         0       0       0
   519 ;;      Temps:          0       0       0
   520 ;;      Totals:         0       0       0
   521 ;;Total ram usage:        0 bytes
   522 ;; Hardware stack levels used: 1
   523 ;; Hardware stack levels required when called: 2
   524 ;; This function calls:
   525 ;;		_SPI_send
   526 ;; This function is called by:
   527 ;;		_main
   528 ;; This function uses a non-reentrant model
   529 ;;
   530                           
   531     00DD                     _MAX7219_Setup:	
   532                           ;psect for function _MAX7219_Setup
   533                           
   534                           
   535                           ;DigitalRotaryEncoder.c: 123: SPI_send(0x0F,0x00);
   536                           
   537                           ;incstack = 0
   538                           ; Regs used in _MAX7219_Setup: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   539     00DD  01F2               	clrf	SPI_send@data
   540     00DE  300F               	movlw	15
   541     00DF  2095               	fcall	_SPI_send
   542                           
   543                           ;DigitalRotaryEncoder.c: 124: SPI_send(0x09,0xFF);
   544     00E0  30FF               	movlw	255
   545     00E1  00F2               	movwf	SPI_send@data
   546     00E2  3009               	movlw	9
   547     00E3  2095               	fcall	_SPI_send
   548                           
   549                           ;DigitalRotaryEncoder.c: 125: SPI_send(0x0A,0x08);
   550     00E4  3008               	movlw	8
   551     00E5  00F2               	movwf	SPI_send@data
   552     00E6  300A               	movlw	10
   553     00E7  2095               	fcall	_SPI_send
   554                           
   555                           ;DigitalRotaryEncoder.c: 126: SPI_send(0x0B,0x07);
   556     00E8  3007               	movlw	7
   557     00E9  00F2               	movwf	SPI_send@data
   558     00EA  300B               	movlw	11
   559     00EB  2095               	fcall	_SPI_send
   560                           
   561                           ;DigitalRotaryEncoder.c: 127: SPI_send(0x0C,0x01);
   562     00EC  01F2               	clrf	SPI_send@data
   563     00ED  0AF2               	incf	SPI_send@data,f
   564     00EE  300C               	movlw	12
   565     00EF  2095               	fcall	_SPI_send
   566     00F0  0008               	return
   567     00F1                     __end_of_MAX7219_Setup:
   568                           
   569                           	psect	text3
   570     0095                     __ptext3:	
   571 ;; *************** function _SPI_send *****************
   572 ;; Defined at:
   573 ;;		line 103 in file "DigitalRotaryEncoder.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;  addr            1    wreg     unsigned char 
   576 ;;  data            1    2[COMMON] unsigned char 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  addr            1    4[COMMON] unsigned char 
   579 ;;  i               2    5[COMMON] int 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0, btemp+1
   584 ;; Tracked objects:
   585 ;;		On entry : 100/0
   586 ;;		On exit  : 100/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMMON   BANK0   BANK1
   589 ;;      Params:         1       0       0
   590 ;;      Locals:         3       0       0
   591 ;;      Temps:          1       0       0
   592 ;;      Totals:         5       0       0
   593 ;;Total ram usage:        5 bytes
   594 ;; Hardware stack levels used: 1
   595 ;; Hardware stack levels required when called: 1
   596 ;; This function calls:
   597 ;;		Nothing
   598 ;; This function is called by:
   599 ;;		_MAX7219_Setup
   600 ;;		_display
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604     0095                     _SPI_send:	
   605                           ;psect for function _SPI_send
   606                           
   607                           
   608                           ;incstack = 0
   609                           ; Regs used in _SPI_send: [wreg+status,2+status,0+btemp+1]
   610                           ;SPI_send@addr stored from wreg
   611     0095  00F4               	movwf	SPI_send@addr
   612                           
   613                           ;DigitalRotaryEncoder.c: 104: int i;;DigitalRotaryEncoder.c: 105: PORTCbits.RC1 = 0;
   614     0096  1087               	bcf	7,1	;volatile
   615                           
   616                           ;DigitalRotaryEncoder.c: 106: for (i=0; i<8; i++){
   617     0097  01F5               	clrf	SPI_send@i
   618     0098  01F6               	clrf	SPI_send@i+1
   619     0099                     l43:
   620                           
   621                           ;DigitalRotaryEncoder.c: 107: PORTCbits.RC0 = 0;
   622     0099  1283               	bcf	3,5	;RP0=0, select bank0
   623     009A  1007               	bcf	7,0	;volatile
   624                           
   625                           ;DigitalRotaryEncoder.c: 108: PORTCbits.RC2 = (addr & 0b10000000) ? 1:0 ;
   626     009B  1FF4               	btfss	SPI_send@addr,7
   627     009C  28A0               	goto	u170
   628     009D  1283               	bcf	3,5	;RP0=0, select bank0
   629     009E  1507               	bsf	7,2	;volatile
   630     009F  28A2               	goto	u184
   631     00A0                     u170:
   632     00A0  1283               	bcf	3,5	;RP0=0, select bank0
   633     00A1  1107               	bcf	7,2	;volatile
   634     00A2                     u184:
   635                           
   636                           ;DigitalRotaryEncoder.c: 109: PORTCbits.RC0 = 1;
   637     00A2  1407               	bsf	7,0	;volatile
   638                           
   639                           ;DigitalRotaryEncoder.c: 110: addr = addr << 1;
   640     00A3  0874               	movf	SPI_send@addr,w
   641     00A4  00F3               	movwf	??_SPI_send
   642     00A5  0773               	addwf	??_SPI_send,w
   643     00A6  00F4               	movwf	SPI_send@addr
   644     00A7  3001               	movlw	1
   645     00A8  07F5               	addwf	SPI_send@i,f
   646     00A9  1803               	skipnc
   647     00AA  0AF6               	incf	SPI_send@i+1,f
   648     00AB  3000               	movlw	0
   649     00AC  07F6               	addwf	SPI_send@i+1,f
   650     00AD  0876               	movf	SPI_send@i+1,w
   651     00AE  3A80               	xorlw	128
   652     00AF  00FF               	movwf	127
   653     00B0  3080               	movlw	128
   654     00B1  027F               	subwf	127,w
   655     00B2  1D03               	skipz
   656     00B3  28B6               	goto	u195
   657     00B4  3008               	movlw	8
   658     00B5  0275               	subwf	SPI_send@i,w
   659     00B6                     u195:
   660     00B6  1C03               	skipc
   661     00B7  2899               	goto	l43
   662                           
   663                           ;DigitalRotaryEncoder.c: 111: };DigitalRotaryEncoder.c: 112: for (i=0; i<8; i++){
   664     00B8  01F5               	clrf	SPI_send@i
   665     00B9  01F6               	clrf	SPI_send@i+1
   666     00BA                     l45:
   667                           
   668                           ;DigitalRotaryEncoder.c: 113: PORTCbits.RC0 = 0;
   669     00BA  1283               	bcf	3,5	;RP0=0, select bank0
   670     00BB  1007               	bcf	7,0	;volatile
   671                           
   672                           ;DigitalRotaryEncoder.c: 114: PORTCbits.RC2 = (data & 0b10000000) ? 1:0 ;
   673     00BC  1FF2               	btfss	SPI_send@data,7
   674     00BD  28C1               	goto	u200
   675     00BE  1283               	bcf	3,5	;RP0=0, select bank0
   676     00BF  1507               	bsf	7,2	;volatile
   677     00C0  28C3               	goto	u214
   678     00C1                     u200:
   679     00C1  1283               	bcf	3,5	;RP0=0, select bank0
   680     00C2  1107               	bcf	7,2	;volatile
   681     00C3                     u214:
   682                           
   683                           ;DigitalRotaryEncoder.c: 115: PORTCbits.RC0 = 1;
   684     00C3  1407               	bsf	7,0	;volatile
   685                           
   686                           ;DigitalRotaryEncoder.c: 116: data = data << 1;
   687     00C4  0872               	movf	SPI_send@data,w
   688     00C5  00F3               	movwf	??_SPI_send
   689     00C6  0773               	addwf	??_SPI_send,w
   690     00C7  00F2               	movwf	SPI_send@data
   691     00C8  3001               	movlw	1
   692     00C9  07F5               	addwf	SPI_send@i,f
   693     00CA  1803               	skipnc
   694     00CB  0AF6               	incf	SPI_send@i+1,f
   695     00CC  3000               	movlw	0
   696     00CD  07F6               	addwf	SPI_send@i+1,f
   697     00CE  0876               	movf	SPI_send@i+1,w
   698     00CF  3A80               	xorlw	128
   699     00D0  00FF               	movwf	127
   700     00D1  3080               	movlw	128
   701     00D2  027F               	subwf	127,w
   702     00D3  1D03               	skipz
   703     00D4  28D7               	goto	u225
   704     00D5  3008               	movlw	8
   705     00D6  0275               	subwf	SPI_send@i,w
   706     00D7                     u225:
   707     00D7  1C03               	skipc
   708     00D8  28BA               	goto	l45
   709                           
   710                           ;DigitalRotaryEncoder.c: 117: };DigitalRotaryEncoder.c: 118: PORTCbits.RC0 = 0;
   711     00D9  1283               	bcf	3,5	;RP0=0, select bank0
   712     00DA  1007               	bcf	7,0	;volatile
   713                           
   714                           ;DigitalRotaryEncoder.c: 119: PORTCbits.RC1 = 1;
   715     00DB  1487               	bsf	7,1	;volatile
   716     00DC  0008               	return
   717     00DD                     __end_of_SPI_send:
   718                           
   719                           	psect	text4
   720     00F1                     __ptext4:	
   721 ;; *************** function _ISR_function *****************
   722 ;; Defined at:
   723 ;;		line 46 in file "DigitalRotaryEncoder.c"
   724 ;; Parameters:    Size  Location     Type
   725 ;;		None
   726 ;; Auto vars:     Size  Location     Type
   727 ;;		None
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		None
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMMON   BANK0   BANK1
   737 ;;      Params:         0       0       0
   738 ;;      Locals:         0       0       0
   739 ;;      Temps:          2       0       0
   740 ;;      Totals:         2       0       0
   741 ;;Total ram usage:        2 bytes
   742 ;; Hardware stack levels used: 1
   743 ;; This function calls:
   744 ;;		Nothing
   745 ;; This function is called by:
   746 ;;		Interrupt level 1
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750     00F1                     _ISR_function:	
   751                           ;psect for function _ISR_function
   752                           
   753                           
   754                           ;DigitalRotaryEncoder.c: 49: if (INTCONbits.RAIF){
   755     00F1  1C0B               	btfss	11,0	;volatile
   756     00F2  28F7               	goto	i1l24
   757                           
   758                           ;DigitalRotaryEncoder.c: 50: int_F = 1;
   759     00F3  1283               	bcf	3,5	;RP0=0, select bank0
   760     00F4  01AB               	clrf	_int_F
   761     00F5  0AAB               	incf	_int_F,f
   762                           
   763                           ;DigitalRotaryEncoder.c: 51: INTCONbits.RAIF = 0;
   764     00F6  100B               	bcf	11,0	;volatile
   765     00F7                     i1l24:
   766     00F7  0871               	movf	??_ISR_function+1,w
   767     00F8  008A               	movwf	10
   768     00F9  0E70               	swapf	??_ISR_function,w
   769     00FA  0083               	movwf	3
   770     00FB  0EFE               	swapf	126,f
   771     00FC  0E7E               	swapf	126,w
   772     00FD  0009               	retfie
   773     00FE                     __end_of_ISR_function:
   774     007E                     btemp	set	126	;btemp
   775     007E                     wtemp0	set	126
   776                           
   777                           	psect	intentry
   778     0004                     __pintentry:	
   779                           ;incstack = 0
   780                           ; Regs used in _ISR_function: []
   781                           
   782     0004                     interrupt_function:
   783     007E                     saved_w	set	btemp
   784     0004  00FE               	movwf	btemp
   785     0005  0E03               	swapf	3,w
   786     0006  00F0               	movwf	??_ISR_function
   787     0007  080A               	movf	10,w
   788     0008  00F1               	movwf	??_ISR_function+1
   789     0009  28F1               	ljmp	_ISR_function
   790                           
   791                           	psect	config
   792                           
   793                           ;Config register CONFIG @ 0x2007
   794                           ;	Oscillator Selection bits
   795                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
   796                           ;	Watchdog Timer Enable bit
   797                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   798                           ;	Power-up Timer Enable bit
   799                           ;	PWRTE = OFF, PWRT disabled
   800                           ;	MCLR Pin Function Select bit
   801                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
   802                           ;	Code Protection bit
   803                           ;	CP = OFF, Program memory code protection is disabled
   804                           ;	Internal Oscillator Frequency Select bit
   805                           ;	IOSCFS = 8MHZ, 8 MHz
   806                           ;	Brown-out Reset Selection bits
   807                           ;	BOREN = OFF, BOR Disabled
   808     2007                     	org	8199
   809     2007  3CD4               	dw	15572

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     11      12
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_display
    _display->_SPI_send
    _MAX7219_Setup->_SPI_send

Critical Paths under _ISR_function in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR_function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_function in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4    1748
                                              0 BANK0     11     7      4
                      _MAX7219_Setup
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              4     0      4    1258
                                              7 COMMON     4     0      4
                           _SPI_send
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Setup                                        0     0      0     440
                           _SPI_send
 ---------------------------------------------------------------------------------
 (2) _SPI_send                                             5     4      1     440
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR_function                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX7219_Setup
     _SPI_send
   _display
     _SPI_send

 _ISR_function (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50      B       C       4       15.0%
BANK1               20      0       0       5        0.0%
ABS                  0      0      17       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      17       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Wed Jul 19 01:57:30 2023

                     l31 0068                       l33 006D                       l43 0099  
                     l35 0071                       l45 00BA                      l674 0074  
                    l668 0061                      l678 006B                      l688 0076  
                    u200 00C1                      u214 00C3                      u225 00D7  
                    u170 00A0                      u184 00A2                      u195 00B6  
            main@counter 0028                     i1l24 00F7                     _main 000F  
                   btemp 007E                     start 000A                    ?_main 0020  
                  _ANSEL 0091          __end_of_display 0103                    _int_F 002B  
                  pclath 000A         __end_of_SPI_send 00DD                    status 0003  
                  wtemp0 007E          __initialization 000B             __end_of_main 0095  
                 ??_main 0024                ??_display 007B                   saved_w 007E  
  __end_of_MAX7219_Setup 00F1  __end_of__initialization 000D           __pcstackCOMMON 0070  
           SPI_send@addr 0074             SPI_send@data 0072                ?_SPI_send 0072  
             __pbssBANK0 002B               __pmaintext 000F               __pintentry 0004  
             ??_SPI_send 0073            ?_ISR_function 0070           display@digit_X 0077  
              SPI_send@i 0075                  __ptext1 00FE                  __ptext2 00DD  
                __ptext3 0095                  __ptext4 00F1                  _display 00FE  
                main@dir 002A     end_of_initialization 000D           ??_ISR_function 0070  
              _PORTAbits 0005                _PORTCbits 0007                _TRISCbits 0087  
             display@val 0079      start_initialization 000B     __end_of_ISR_function 00FE  
              ___latbits 0000            __pcstackBANK0 0020                 ?_display 0077  
          _MAX7219_Setup 00DD        interrupt_function 0004                 _IOCAbits 0096  
               _SPI_send 0095           ?_MAX7219_Setup 0070             _ISR_function 00F1  
               main@argc 0020                 main@argv 0022               _INTCONbits 000B  
        ??_MAX7219_Setup 0077                 intlevel1 0000  
