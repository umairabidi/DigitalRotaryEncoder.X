

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Jul 25 01:00:45 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og9 
     1                           	processor	16F616
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 09/02/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F616 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0007                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000E                     	;# 
    65     000E                     	;# 
    66     000F                     	;# 
    67     0010                     	;# 
    68     0011                     	;# 
    69     0012                     	;# 
    70     0013                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0016                     	;# 
    75     0017                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001C                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0087                     	;# 
    85     008C                     	;# 
    86     008E                     	;# 
    87     0090                     	;# 
    88     0091                     	;# 
    89     0092                     	;# 
    90     0095                     	;# 
    91     0095                     	;# 
    92     0096                     	;# 
    93     0096                     	;# 
    94     0099                     	;# 
    95     0099                     	;# 
    96     009A                     	;# 
    97     009E                     	;# 
    98     009F                     	;# 
    99     0005                     _PORTAbits	set	5
   100     0007                     _PORTCbits	set	7
   101     000B                     _INTCONbits	set	11
   102     0096                     _IOCAbits	set	150
   103     0091                     _ANSEL	set	145
   104     0087                     _TRISCbits	set	135
   105                           
   106                           	psect	cinit
   107     000B                     start_initialization:	
   108                           ; #config settings
   109                           
   110     000B                     __initialization:
   111                           
   112                           ; Clear objects allocated to BANK0
   113     000B  1283               	bcf	3,5	;RP0=0, select bank0
   114     000C  01B6               	clrf	__pbssBANK0& (0+127)
   115     000D                     end_of_initialization:	
   116                           ;End of C runtime variable initialization code
   117                           
   118     000D                     __end_of__initialization:
   119     000D  0183               	clrf	3
   120     000E  294B               	ljmp	_main	;jump to C main() function
   121                           
   122                           	psect	bssBANK0
   123     0036                     __pbssBANK0:
   124     0036                     _int_F:
   125     0036                     	ds	1
   126                           
   127                           	psect	cstackCOMMON
   128     0070                     __pcstackCOMMON:
   129     0070                     ?_MAX7219_Setup:
   130     0070                     ?_ISR_function:	
   131                           ; 1 bytes @ 0x0
   132                           
   133     0070                     ??_ISR_function:	
   134                           ; 1 bytes @ 0x0
   135                           
   136                           
   137                           ; 1 bytes @ 0x0
   138     0070                     	ds	2
   139     0072                     ?_SPI_send:
   140     0072                     ?___lldiv:	
   141                           ; 1 bytes @ 0x2
   142                           
   143     0072                     ?___llmod:	
   144                           ; 4 bytes @ 0x2
   145                           
   146     0072                     SPI_send@data:	
   147                           ; 4 bytes @ 0x2
   148                           
   149     0072                     ___lldiv@divisor:	
   150                           ; 1 bytes @ 0x2
   151                           
   152     0072                     ___llmod@divisor:	
   153                           ; 4 bytes @ 0x2
   154                           
   155                           
   156                           ; 4 bytes @ 0x2
   157     0072                     	ds	1
   158     0073                     ??_SPI_send:
   159                           
   160                           ; 1 bytes @ 0x3
   161     0073                     	ds	1
   162     0074                     SPI_send@addr:
   163                           
   164                           ; 1 bytes @ 0x4
   165     0074                     	ds	1
   166     0075                     SPI_send@i:
   167                           
   168                           ; 2 bytes @ 0x5
   169     0075                     	ds	1
   170     0076                     ___lldiv@dividend:
   171     0076                     ___llmod@dividend:	
   172                           ; 4 bytes @ 0x6
   173                           
   174                           
   175                           ; 4 bytes @ 0x6
   176     0076                     	ds	1
   177     0077                     ??_MAX7219_Setup:
   178                           
   179                           ; 1 bytes @ 0x7
   180     0077                     	ds	3
   181     007A                     ??___lldiv:
   182     007A                     ??___llmod:	
   183                           ; 1 bytes @ 0xA
   184                           
   185                           
   186                           ; 1 bytes @ 0xA
   187     007A                     	ds	1
   188     007B                     ___llmod@counter:
   189                           
   190                           ; 1 bytes @ 0xB
   191     007B                     	ds	1
   192     007C                     ??_display_num:
   193     007C                     ??_display_digit:	
   194                           ; 1 bytes @ 0xC
   195                           
   196                           
   197                           	psect	cstackBANK0
   198     0020                     __pcstackBANK0:	
   199                           ; 1 bytes @ 0xC
   200                           
   201     0020                     ?_display_digit:
   202     0020                     display_digit@digit_X:	
   203                           ; 1 bytes @ 0x0
   204                           
   205     0020                     ___lldiv@quotient:	
   206                           ; 2 bytes @ 0x0
   207                           
   208                           
   209                           ; 4 bytes @ 0x0
   210     0020                     	ds	2
   211     0022                     display_digit@val:
   212                           
   213                           ; 2 bytes @ 0x2
   214     0022                     	ds	2
   215     0024                     ___lldiv@counter:
   216                           
   217                           ; 1 bytes @ 0x4
   218     0024                     	ds	1
   219     0025                     ?_display_num:
   220     0025                     display_num@val:	
   221                           ; 1 bytes @ 0x5
   222                           
   223                           
   224                           ; 4 bytes @ 0x5
   225     0025                     	ds	4
   226     0029                     display_num@i:
   227                           
   228                           ; 2 bytes @ 0x9
   229     0029                     	ds	2
   230     002B                     ?_main:
   231     002B                     main@argc:	
   232                           ; 2 bytes @ 0xB
   233                           
   234                           
   235                           ; 2 bytes @ 0xB
   236     002B                     	ds	2
   237     002D                     main@argv:
   238                           
   239                           ; 2 bytes @ 0xD
   240     002D                     	ds	2
   241     002F                     ??_main:
   242                           
   243                           ; 1 bytes @ 0xF
   244     002F                     	ds	4
   245     0033                     main@counter:
   246                           
   247                           ; 2 bytes @ 0x13
   248     0033                     	ds	2
   249     0035                     main@dir:
   250                           
   251                           ; 1 bytes @ 0x15
   252     0035                     	ds	1
   253                           
   254                           	psect	maintext
   255     014B                     __pmaintext:	
   256 ;;
   257 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   258 ;;
   259 ;; *************** function _main *****************
   260 ;; Defined at:
   261 ;;		line 56 in file "DigitalRotaryEncoder.c"
   262 ;; Parameters:    Size  Location     Type
   263 ;;  argc            2   11[BANK0 ] int 
   264 ;;  argv            2   13[BANK0 ] PTR PTR unsigned char 
   265 ;; Auto vars:     Size  Location     Type
   266 ;;  counter         2   19[BANK0 ] unsigned int 
   267 ;;  dir             1   21[BANK0 ] unsigned char 
   268 ;; Return value:  Size  Location     Type
   269 ;;                  2   11[BANK0 ] int 
   270 ;; Registers used:
   271 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   272 ;; Tracked objects:
   273 ;;		On entry : B00/0
   274 ;;		On exit  : 100/0
   275 ;;		Unchanged: 0/0
   276 ;; Data sizes:     COMMON   BANK0   BANK1
   277 ;;      Params:         0       4       0
   278 ;;      Locals:         0       3       0
   279 ;;      Temps:          0       4       0
   280 ;;      Totals:         0      11       0
   281 ;;Total ram usage:       11 bytes
   282 ;; Hardware stack levels required when called: 4
   283 ;; This function calls:
   284 ;;		_MAX7219_Setup
   285 ;;		_display_num
   286 ;; This function is called by:
   287 ;;		Startup code after reset
   288 ;; This function uses a non-reentrant model
   289 ;;
   290                           
   291     014B                     _main:	
   292                           ;psect for function _main
   293                           
   294                           
   295                           ;DigitalRotaryEncoder.c: 57: TRISCbits.TRISC2 = 0;
   296                           
   297                           ;incstack = 0
   298                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   299     014B  1683               	bsf	3,5	;RP0=1, select bank1
   300     014C  1107               	bcf	7,2	;volatile
   301                           
   302                           ;DigitalRotaryEncoder.c: 58: TRISCbits.TRISC1 = 0;
   303     014D  1087               	bcf	7,1	;volatile
   304                           
   305                           ;DigitalRotaryEncoder.c: 59: TRISCbits.TRISC0 = 0;
   306     014E  1007               	bcf	7,0	;volatile
   307                           
   308                           ;DigitalRotaryEncoder.c: 60: ANSEL = 0;
   309     014F  0191               	clrf	17	;volatile
   310                           
   311                           ;DigitalRotaryEncoder.c: 61: IOCAbits.IOC0 = 1;
   312     0150  1416               	bsf	22,0	;volatile
   313                           
   314                           ;DigitalRotaryEncoder.c: 62: INTCONbits.GIE = 1;
   315     0151  178B               	bsf	11,7	;volatile
   316                           
   317                           ;DigitalRotaryEncoder.c: 63: INTCONbits.RAIE = 1;
   318     0152  158B               	bsf	11,3	;volatile
   319                           
   320                           ;DigitalRotaryEncoder.c: 65: PORTCbits.RC0 = 0;
   321     0153  1283               	bcf	3,5	;RP0=0, select bank0
   322     0154  1007               	bcf	7,0	;volatile
   323                           
   324                           ;DigitalRotaryEncoder.c: 66: PORTCbits.RC1 = 1;
   325     0155  1487               	bsf	7,1	;volatile
   326                           
   327                           ;DigitalRotaryEncoder.c: 67: PORTCbits.RC2 = 0;
   328     0156  1107               	bcf	7,2	;volatile
   329                           
   330                           ;DigitalRotaryEncoder.c: 68: MAX7219_Setup();
   331     0157  2190               	fcall	_MAX7219_Setup
   332                           
   333                           ;DigitalRotaryEncoder.c: 70: uint16_t counter = 5;
   334     0158  3005               	movlw	5
   335     0159  00B3               	movwf	main@counter
   336     015A  3000               	movlw	0
   337     015B  00B4               	movwf	main@counter+1
   338                           
   339                           ;DigitalRotaryEncoder.c: 71: uint8_t dir;;DigitalRotaryEncoder.c: 72: int_F = 0;
   340     015C  01B6               	clrf	_int_F
   341                           
   342                           ;DigitalRotaryEncoder.c: 73: display_num(12345678);
   343     015D  3000               	movlw	0
   344     015E  00A8               	movwf	display_num@val+3
   345     015F  30BC               	movlw	188
   346     0160  00A7               	movwf	display_num@val+2
   347     0161  3061               	movlw	97
   348     0162  00A6               	movwf	display_num@val+1
   349     0163  304E               	movlw	78
   350     0164  00A5               	movwf	display_num@val
   351     0165  20B9               	fcall	_display_num
   352     0166                     l740:
   353                           
   354                           ;DigitalRotaryEncoder.c: 76: if (int_F){
   355     0166  1283               	bcf	3,5	;RP0=0, select bank0
   356     0167  0836               	movf	_int_F,w
   357     0168  1903               	btfsc	3,2
   358     0169  2966               	goto	l740
   359                           
   360                           ;DigitalRotaryEncoder.c: 77: dir = (PORTAbits.RA0 + PORTAbits.RA1)%2;
   361     016A  0C05               	rrf	5,w	;volatile
   362     016B  3901               	andlw	1
   363     016C  00AF               	movwf	??_main
   364     016D  0805               	movf	5,w	;volatile
   365     016E  3901               	andlw	1
   366     016F  072F               	addwf	??_main,w
   367     0170  3901               	andlw	1
   368     0171  00B5               	movwf	main@dir
   369                           
   370                           ;DigitalRotaryEncoder.c: 78: counter += dir*2 - 1;
   371     0172  0835               	movf	main@dir,w
   372     0173  00AF               	movwf	??_main
   373     0174  01B0               	clrf	??_main+1
   374     0175  1003               	clrc
   375     0176  0DAF               	rlf	??_main,f
   376     0177  0DB0               	rlf	??_main+1,f
   377     0178  082F               	movf	??_main,w
   378     0179  3EFF               	addlw	255
   379     017A  00B1               	movwf	??_main+2
   380     017B  0830               	movf	??_main+1,w
   381     017C  1803               	skipnc
   382     017D  3E01               	addlw	1
   383     017E  3EFF               	addlw	255
   384     017F  00B2               	movwf	??_main+3
   385     0180  0831               	movf	??_main+2,w
   386     0181  07B3               	addwf	main@counter,f
   387     0182  1803               	skipnc
   388     0183  0AB4               	incf	main@counter+1,f
   389     0184  0832               	movf	??_main+3,w
   390     0185  07B4               	addwf	main@counter+1,f
   391                           
   392                           ;DigitalRotaryEncoder.c: 79: display_num(counter);
   393     0186  0833               	movf	main@counter,w
   394     0187  00A5               	movwf	display_num@val
   395     0188  0834               	movf	main@counter+1,w
   396     0189  00A6               	movwf	display_num@val+1
   397     018A  01A7               	clrf	display_num@val+2
   398     018B  01A8               	clrf	display_num@val+3
   399     018C  20B9               	fcall	_display_num
   400                           
   401                           ;DigitalRotaryEncoder.c: 80: int_F = 0;
   402     018D  1283               	bcf	3,5	;RP0=0, select bank0
   403     018E  01B6               	clrf	_int_F
   404     018F  2966               	goto	l740
   405     0190                     __end_of_main:
   406                           
   407                           	psect	text1
   408     00B9                     __ptext1:	
   409 ;; *************** function _display_num *****************
   410 ;; Defined at:
   411 ;;		line 118 in file "DigitalRotaryEncoder.c"
   412 ;; Parameters:    Size  Location     Type
   413 ;;  val             4    5[BANK0 ] unsigned long 
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  i               2    9[BANK0 ] int 
   416 ;; Return value:  Size  Location     Type
   417 ;;                  1    wreg      void 
   418 ;; Registers used:
   419 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   420 ;; Tracked objects:
   421 ;;		On entry : 100/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMMON   BANK0   BANK1
   425 ;;      Params:         0       4       0
   426 ;;      Locals:         0       2       0
   427 ;;      Temps:          0       0       0
   428 ;;      Totals:         0       6       0
   429 ;;Total ram usage:        6 bytes
   430 ;; Hardware stack levels used: 1
   431 ;; Hardware stack levels required when called: 3
   432 ;; This function calls:
   433 ;;		___lldiv
   434 ;;		___llmod
   435 ;;		_display_digit
   436 ;; This function is called by:
   437 ;;		_main
   438 ;; This function uses a non-reentrant model
   439 ;;
   440                           
   441     00B9                     _display_num:	
   442                           ;psect for function _display_num
   443                           
   444                           
   445                           ;DigitalRotaryEncoder.c: 119: int i;;DigitalRotaryEncoder.c: 120: for (i=1; i<=8; i++){
   446                           
   447                           ;incstack = 0
   448                           ; Regs used in _display_num: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   449     00B9  3001               	movlw	1
   450     00BA  00A9               	movwf	display_num@i
   451     00BB  3000               	movlw	0
   452     00BC  00AA               	movwf	display_num@i+1
   453     00BD                     l706:
   454                           
   455                           ;DigitalRotaryEncoder.c: 121: display_digit(i, val%10);
   456     00BD  1283               	bcf	3,5	;RP0=0, select bank0
   457     00BE  082A               	movf	display_num@i+1,w
   458     00BF  00A1               	movwf	display_digit@digit_X+1
   459     00C0  0829               	movf	display_num@i,w
   460     00C1  00A0               	movwf	display_digit@digit_X
   461     00C2  3000               	movlw	0
   462     00C3  00F5               	movwf	___llmod@divisor+3
   463     00C4  3000               	movlw	0
   464     00C5  00F4               	movwf	___llmod@divisor+2
   465     00C6  3000               	movlw	0
   466     00C7  00F3               	movwf	___llmod@divisor+1
   467     00C8  300A               	movlw	10
   468     00C9  00F2               	movwf	___llmod@divisor
   469     00CA  0828               	movf	display_num@val+3,w
   470     00CB  00F9               	movwf	___llmod@dividend+3
   471     00CC  0827               	movf	display_num@val+2,w
   472     00CD  00F8               	movwf	___llmod@dividend+2
   473     00CE  0826               	movf	display_num@val+1,w
   474     00CF  00F7               	movwf	___llmod@dividend+1
   475     00D0  0825               	movf	display_num@val,w
   476     00D1  00F6               	movwf	___llmod@dividend
   477     00D2  206D               	fcall	___llmod
   478     00D3  0873               	movf	?___llmod+1,w
   479     00D4  00A3               	movwf	display_digit@val+1
   480     00D5  0872               	movf	?___llmod,w
   481     00D6  00A2               	movwf	display_digit@val
   482     00D7  21B1               	fcall	_display_digit
   483                           
   484                           ;DigitalRotaryEncoder.c: 122: val /= 10;
   485     00D8  3000               	movlw	0
   486     00D9  00F5               	movwf	___lldiv@divisor+3
   487     00DA  3000               	movlw	0
   488     00DB  00F4               	movwf	___lldiv@divisor+2
   489     00DC  3000               	movlw	0
   490     00DD  00F3               	movwf	___lldiv@divisor+1
   491     00DE  300A               	movlw	10
   492     00DF  00F2               	movwf	___lldiv@divisor
   493     00E0  0828               	movf	display_num@val+3,w
   494     00E1  00F9               	movwf	___lldiv@dividend+3
   495     00E2  0827               	movf	display_num@val+2,w
   496     00E3  00F8               	movwf	___lldiv@dividend+2
   497     00E4  0826               	movf	display_num@val+1,w
   498     00E5  00F7               	movwf	___lldiv@dividend+1
   499     00E6  0825               	movf	display_num@val,w
   500     00E7  00F6               	movwf	___lldiv@dividend
   501     00E8  200F               	fcall	___lldiv
   502     00E9  0875               	movf	?___lldiv+3,w
   503     00EA  00A8               	movwf	display_num@val+3
   504     00EB  0874               	movf	?___lldiv+2,w
   505     00EC  00A7               	movwf	display_num@val+2
   506     00ED  0873               	movf	?___lldiv+1,w
   507     00EE  00A6               	movwf	display_num@val+1
   508     00EF  0872               	movf	?___lldiv,w
   509     00F0  00A5               	movwf	display_num@val
   510     00F1  3001               	movlw	1
   511     00F2  07A9               	addwf	display_num@i,f
   512     00F3  1803               	skipnc
   513     00F4  0AAA               	incf	display_num@i+1,f
   514     00F5  3000               	movlw	0
   515     00F6  07AA               	addwf	display_num@i+1,f
   516     00F7  082A               	movf	display_num@i+1,w
   517     00F8  3A80               	xorlw	128
   518     00F9  00FF               	movwf	127
   519     00FA  3080               	movlw	128
   520     00FB  027F               	subwf	127,w
   521     00FC  1D03               	skipz
   522     00FD  2900               	goto	u425
   523     00FE  3009               	movlw	9
   524     00FF  0229               	subwf	display_num@i,w
   525     0100                     u425:
   526     0100  1803               	btfsc	3,0
   527     0101  0008               	return
   528     0102  28BD               	goto	l706
   529     0103                     __end_of_display_num:
   530                           
   531                           	psect	text2
   532     01B1                     __ptext2:	
   533 ;; *************** function _display_digit *****************
   534 ;; Defined at:
   535 ;;		line 114 in file "DigitalRotaryEncoder.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;  digit_X         2    0[BANK0 ] int 
   538 ;;  val             2    2[BANK0 ] int 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;		None
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   545 ;; Tracked objects:
   546 ;;		On entry : 100/0
   547 ;;		On exit  : 100/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMMON   BANK0   BANK1
   550 ;;      Params:         0       4       0
   551 ;;      Locals:         0       0       0
   552 ;;      Temps:          0       0       0
   553 ;;      Totals:         0       4       0
   554 ;;Total ram usage:        4 bytes
   555 ;; Hardware stack levels used: 1
   556 ;; Hardware stack levels required when called: 2
   557 ;; This function calls:
   558 ;;		_SPI_send
   559 ;; This function is called by:
   560 ;;		_display_num
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564     01B1                     _display_digit:	
   565                           ;psect for function _display_digit
   566                           
   567                           
   568                           ;DigitalRotaryEncoder.c: 115: SPI_send(digit_X, val);
   569                           
   570                           ;incstack = 0
   571                           ; Regs used in _display_digit: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   572     01B1  0822               	movf	display_digit@val,w
   573     01B2  00F2               	movwf	SPI_send@data
   574     01B3  0820               	movf	display_digit@digit_X,w
   575     01B4  2103               	fcall	_SPI_send
   576     01B5  0008               	return
   577     01B6                     __end_of_display_digit:
   578                           
   579                           	psect	text3
   580     006D                     __ptext3:	
   581 ;; *************** function ___llmod *****************
   582 ;; Defined at:
   583 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\llmod.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;  divisor         4    2[COMMON] unsigned long 
   586 ;;  dividend        4    6[COMMON] unsigned long 
   587 ;; Auto vars:     Size  Location     Type
   588 ;;  counter         1   11[COMMON] unsigned char 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  4    2[COMMON] unsigned long 
   591 ;; Registers used:
   592 ;;		wreg, status,2, status,0, btemp+1
   593 ;; Tracked objects:
   594 ;;		On entry : 100/0
   595 ;;		On exit  : 100/0
   596 ;;		Unchanged: 100/0
   597 ;; Data sizes:     COMMON   BANK0   BANK1
   598 ;;      Params:         8       0       0
   599 ;;      Locals:         1       0       0
   600 ;;      Temps:          1       0       0
   601 ;;      Totals:        10       0       0
   602 ;;Total ram usage:       10 bytes
   603 ;; Hardware stack levels used: 1
   604 ;; Hardware stack levels required when called: 1
   605 ;; This function calls:
   606 ;;		Nothing
   607 ;; This function is called by:
   608 ;;		_display_num
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612     006D                     ___llmod:	
   613                           ;psect for function ___llmod
   614                           
   615                           
   616                           ;incstack = 0
   617                           ; Regs used in ___llmod: [wreg+status,2+status,0+btemp+1]
   618     006D  0875               	movf	___llmod@divisor+3,w
   619     006E  0474               	iorwf	___llmod@divisor+2,w
   620     006F  0473               	iorwf	___llmod@divisor+1,w
   621     0070  0472               	iorwf	___llmod@divisor,w
   622     0071  1903               	skipnz
   623     0072  28B0               	goto	l694
   624     0073  01FB               	clrf	___llmod@counter
   625     0074  0AFB               	incf	___llmod@counter,f
   626     0075                     l684:
   627     0075  1BF5               	btfsc	___llmod@divisor+3,7
   628     0076  2885               	goto	l686
   629     0077  3001               	movlw	1
   630     0078  00FA               	movwf	??___llmod
   631     0079                     u375:
   632     0079  1003               	clrc
   633     007A  0DF2               	rlf	___llmod@divisor,f
   634     007B  0DF3               	rlf	___llmod@divisor+1,f
   635     007C  0DF4               	rlf	___llmod@divisor+2,f
   636     007D  0DF5               	rlf	___llmod@divisor+3,f
   637     007E  0BFA               	decfsz	??___llmod,f
   638     007F  2879               	goto	u375
   639     0080  3001               	movlw	1
   640     0081  00FF               	movwf	127
   641     0082  087F               	movf	127,w
   642     0083  07FB               	addwf	___llmod@counter,f
   643     0084  2875               	goto	l684
   644     0085                     l686:
   645     0085  0875               	movf	___llmod@divisor+3,w
   646     0086  0279               	subwf	___llmod@dividend+3,w
   647     0087  1D03               	skipz
   648     0088  2893               	goto	u395
   649     0089  0874               	movf	___llmod@divisor+2,w
   650     008A  0278               	subwf	___llmod@dividend+2,w
   651     008B  1D03               	skipz
   652     008C  2893               	goto	u395
   653     008D  0873               	movf	___llmod@divisor+1,w
   654     008E  0277               	subwf	___llmod@dividend+1,w
   655     008F  1D03               	skipz
   656     0090  2893               	goto	u395
   657     0091  0872               	movf	___llmod@divisor,w
   658     0092  0276               	subwf	___llmod@dividend,w
   659     0093                     u395:
   660     0093  1C03               	skipc
   661     0094  28A3               	goto	l690
   662     0095  0872               	movf	___llmod@divisor,w
   663     0096  02F6               	subwf	___llmod@dividend,f
   664     0097  0873               	movf	___llmod@divisor+1,w
   665     0098  1C03               	skipc
   666     0099  0F73               	incfsz	___llmod@divisor+1,w
   667     009A  02F7               	subwf	___llmod@dividend+1,f
   668     009B  0874               	movf	___llmod@divisor+2,w
   669     009C  1C03               	skipc
   670     009D  0F74               	incfsz	___llmod@divisor+2,w
   671     009E  02F8               	subwf	___llmod@dividend+2,f
   672     009F  0875               	movf	___llmod@divisor+3,w
   673     00A0  1C03               	skipc
   674     00A1  0F75               	incfsz	___llmod@divisor+3,w
   675     00A2  02F9               	subwf	___llmod@dividend+3,f
   676     00A3                     l690:
   677     00A3  3001               	movlw	1
   678     00A4                     u405:
   679     00A4  1003               	clrc
   680     00A5  0CF5               	rrf	___llmod@divisor+3,f
   681     00A6  0CF4               	rrf	___llmod@divisor+2,f
   682     00A7  0CF3               	rrf	___llmod@divisor+1,f
   683     00A8  0CF2               	rrf	___llmod@divisor,f
   684     00A9  3EFF               	addlw	-1
   685     00AA  1D03               	skipz
   686     00AB  28A4               	goto	u405
   687     00AC  3001               	movlw	1
   688     00AD  02FB               	subwf	___llmod@counter,f
   689     00AE  1D03               	btfss	3,2
   690     00AF  2885               	goto	l686
   691     00B0                     l694:
   692     00B0  0879               	movf	___llmod@dividend+3,w
   693     00B1  00F5               	movwf	?___llmod+3
   694     00B2  0878               	movf	___llmod@dividend+2,w
   695     00B3  00F4               	movwf	?___llmod+2
   696     00B4  0877               	movf	___llmod@dividend+1,w
   697     00B5  00F3               	movwf	?___llmod+1
   698     00B6  0876               	movf	___llmod@dividend,w
   699     00B7  00F2               	movwf	?___llmod
   700     00B8  0008               	return
   701     00B9                     __end_of___llmod:
   702                           
   703                           	psect	text4
   704     000F                     __ptext4:	
   705 ;; *************** function ___lldiv *****************
   706 ;; Defined at:
   707 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\__lldiv.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;  divisor         4    2[COMMON] unsigned long 
   710 ;;  dividend        4    6[COMMON] unsigned long 
   711 ;; Auto vars:     Size  Location     Type
   712 ;;  quotient        4    0[BANK0 ] unsigned long 
   713 ;;  counter         1    4[BANK0 ] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  4    2[COMMON] unsigned long 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0, btemp+1
   718 ;; Tracked objects:
   719 ;;		On entry : 100/0
   720 ;;		On exit  : 100/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1
   723 ;;      Params:         8       0       0
   724 ;;      Locals:         0       5       0
   725 ;;      Temps:          1       0       0
   726 ;;      Totals:         9       5       0
   727 ;;Total ram usage:       14 bytes
   728 ;; Hardware stack levels used: 1
   729 ;; Hardware stack levels required when called: 1
   730 ;; This function calls:
   731 ;;		Nothing
   732 ;; This function is called by:
   733 ;;		_display_num
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737     000F                     ___lldiv:	
   738                           ;psect for function ___lldiv
   739                           
   740                           
   741                           ;incstack = 0
   742                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
   743     000F  3000               	movlw	0
   744     0010  00A3               	movwf	___lldiv@quotient+3
   745     0011  3000               	movlw	0
   746     0012  00A2               	movwf	___lldiv@quotient+2
   747     0013  3000               	movlw	0
   748     0014  00A1               	movwf	___lldiv@quotient+1
   749     0015  3000               	movlw	0
   750     0016  00A0               	movwf	___lldiv@quotient
   751     0017  0875               	movf	___lldiv@divisor+3,w
   752     0018  0474               	iorwf	___lldiv@divisor+2,w
   753     0019  0473               	iorwf	___lldiv@divisor+1,w
   754     001A  0472               	iorwf	___lldiv@divisor,w
   755     001B  1903               	skipnz
   756     001C  2864               	goto	l672
   757     001D  01A4               	clrf	___lldiv@counter
   758     001E  0AA4               	incf	___lldiv@counter,f
   759     001F                     l658:
   760     001F  1BF5               	btfsc	___lldiv@divisor+3,7
   761     0020  282F               	goto	l660
   762     0021  3001               	movlw	1
   763     0022  00FA               	movwf	??___lldiv
   764     0023                     u305:
   765     0023  1003               	clrc
   766     0024  0DF2               	rlf	___lldiv@divisor,f
   767     0025  0DF3               	rlf	___lldiv@divisor+1,f
   768     0026  0DF4               	rlf	___lldiv@divisor+2,f
   769     0027  0DF5               	rlf	___lldiv@divisor+3,f
   770     0028  0BFA               	decfsz	??___lldiv,f
   771     0029  2823               	goto	u305
   772     002A  3001               	movlw	1
   773     002B  00FF               	movwf	127
   774     002C  087F               	movf	127,w
   775     002D  07A4               	addwf	___lldiv@counter,f
   776     002E  281F               	goto	l658
   777     002F                     l660:
   778     002F  3001               	movlw	1
   779     0030  00FA               	movwf	??___lldiv
   780     0031                     u325:
   781     0031  1003               	clrc
   782     0032  0DA0               	rlf	___lldiv@quotient,f
   783     0033  0DA1               	rlf	___lldiv@quotient+1,f
   784     0034  0DA2               	rlf	___lldiv@quotient+2,f
   785     0035  0DA3               	rlf	___lldiv@quotient+3,f
   786     0036  0BFA               	decfsz	??___lldiv,f
   787     0037  2831               	goto	u325
   788     0038  0875               	movf	___lldiv@divisor+3,w
   789     0039  0279               	subwf	___lldiv@dividend+3,w
   790     003A  1D03               	skipz
   791     003B  2846               	goto	u335
   792     003C  0874               	movf	___lldiv@divisor+2,w
   793     003D  0278               	subwf	___lldiv@dividend+2,w
   794     003E  1D03               	skipz
   795     003F  2846               	goto	u335
   796     0040  0873               	movf	___lldiv@divisor+1,w
   797     0041  0277               	subwf	___lldiv@dividend+1,w
   798     0042  1D03               	skipz
   799     0043  2846               	goto	u335
   800     0044  0872               	movf	___lldiv@divisor,w
   801     0045  0276               	subwf	___lldiv@dividend,w
   802     0046                     u335:
   803     0046  1C03               	skipc
   804     0047  2857               	goto	l668
   805     0048  0872               	movf	___lldiv@divisor,w
   806     0049  02F6               	subwf	___lldiv@dividend,f
   807     004A  0873               	movf	___lldiv@divisor+1,w
   808     004B  1C03               	skipc
   809     004C  0F73               	incfsz	___lldiv@divisor+1,w
   810     004D  02F7               	subwf	___lldiv@dividend+1,f
   811     004E  0874               	movf	___lldiv@divisor+2,w
   812     004F  1C03               	skipc
   813     0050  0F74               	incfsz	___lldiv@divisor+2,w
   814     0051  02F8               	subwf	___lldiv@dividend+2,f
   815     0052  0875               	movf	___lldiv@divisor+3,w
   816     0053  1C03               	skipc
   817     0054  0F75               	incfsz	___lldiv@divisor+3,w
   818     0055  02F9               	subwf	___lldiv@dividend+3,f
   819     0056  1420               	bsf	___lldiv@quotient,0
   820     0057                     l668:
   821     0057  3001               	movlw	1
   822     0058                     u345:
   823     0058  1003               	clrc
   824     0059  0CF5               	rrf	___lldiv@divisor+3,f
   825     005A  0CF4               	rrf	___lldiv@divisor+2,f
   826     005B  0CF3               	rrf	___lldiv@divisor+1,f
   827     005C  0CF2               	rrf	___lldiv@divisor,f
   828     005D  3EFF               	addlw	-1
   829     005E  1D03               	skipz
   830     005F  2858               	goto	u345
   831     0060  3001               	movlw	1
   832     0061  02A4               	subwf	___lldiv@counter,f
   833     0062  1D03               	btfss	3,2
   834     0063  282F               	goto	l660
   835     0064                     l672:
   836     0064  0823               	movf	___lldiv@quotient+3,w
   837     0065  00F5               	movwf	?___lldiv+3
   838     0066  0822               	movf	___lldiv@quotient+2,w
   839     0067  00F4               	movwf	?___lldiv+2
   840     0068  0821               	movf	___lldiv@quotient+1,w
   841     0069  00F3               	movwf	?___lldiv+1
   842     006A  0820               	movf	___lldiv@quotient,w
   843     006B  00F2               	movwf	?___lldiv
   844     006C  0008               	return
   845     006D                     __end_of___lldiv:
   846                           
   847                           	psect	text5
   848     0190                     __ptext5:	
   849 ;; *************** function _MAX7219_Setup *****************
   850 ;; Defined at:
   851 ;;		line 106 in file "DigitalRotaryEncoder.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : B00/0
   862 ;;		On exit  : 100/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1
   865 ;;      Params:         0       0       0
   866 ;;      Locals:         0       0       0
   867 ;;      Temps:          0       0       0
   868 ;;      Totals:         0       0       0
   869 ;;Total ram usage:        0 bytes
   870 ;; Hardware stack levels used: 1
   871 ;; Hardware stack levels required when called: 2
   872 ;; This function calls:
   873 ;;		_SPI_send
   874 ;; This function is called by:
   875 ;;		_main
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879     0190                     _MAX7219_Setup:	
   880                           ;psect for function _MAX7219_Setup
   881                           
   882                           
   883                           ;DigitalRotaryEncoder.c: 107: SPI_send(0x0F,0x00);
   884                           
   885                           ;incstack = 0
   886                           ; Regs used in _MAX7219_Setup: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   887     0190  01F2               	clrf	SPI_send@data
   888     0191  300F               	movlw	15
   889     0192  2103               	fcall	_SPI_send
   890                           
   891                           ;DigitalRotaryEncoder.c: 108: SPI_send(0x09,0xFF);
   892     0193  30FF               	movlw	255
   893     0194  00F2               	movwf	SPI_send@data
   894     0195  3009               	movlw	9
   895     0196  2103               	fcall	_SPI_send
   896                           
   897                           ;DigitalRotaryEncoder.c: 109: SPI_send(0x0A,0x08);
   898     0197  3008               	movlw	8
   899     0198  00F2               	movwf	SPI_send@data
   900     0199  300A               	movlw	10
   901     019A  2103               	fcall	_SPI_send
   902                           
   903                           ;DigitalRotaryEncoder.c: 110: SPI_send(0x0B,0x07);
   904     019B  3007               	movlw	7
   905     019C  00F2               	movwf	SPI_send@data
   906     019D  300B               	movlw	11
   907     019E  2103               	fcall	_SPI_send
   908                           
   909                           ;DigitalRotaryEncoder.c: 111: SPI_send(0x0C,0x01);
   910     019F  01F2               	clrf	SPI_send@data
   911     01A0  0AF2               	incf	SPI_send@data,f
   912     01A1  300C               	movlw	12
   913     01A2  2103               	fcall	_SPI_send
   914     01A3  0008               	return
   915     01A4                     __end_of_MAX7219_Setup:
   916                           
   917                           	psect	text6
   918     0103                     __ptext6:	
   919 ;; *************** function _SPI_send *****************
   920 ;; Defined at:
   921 ;;		line 87 in file "DigitalRotaryEncoder.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;  addr            1    wreg     unsigned char 
   924 ;;  data            1    2[COMMON] unsigned char 
   925 ;; Auto vars:     Size  Location     Type
   926 ;;  addr            1    4[COMMON] unsigned char 
   927 ;;  i               2    5[COMMON] int 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, status,2, status,0, btemp+1
   932 ;; Tracked objects:
   933 ;;		On entry : 100/0
   934 ;;		On exit  : 100/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMMON   BANK0   BANK1
   937 ;;      Params:         1       0       0
   938 ;;      Locals:         3       0       0
   939 ;;      Temps:          1       0       0
   940 ;;      Totals:         5       0       0
   941 ;;Total ram usage:        5 bytes
   942 ;; Hardware stack levels used: 1
   943 ;; Hardware stack levels required when called: 1
   944 ;; This function calls:
   945 ;;		Nothing
   946 ;; This function is called by:
   947 ;;		_MAX7219_Setup
   948 ;;		_display_digit
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952     0103                     _SPI_send:	
   953                           ;psect for function _SPI_send
   954                           
   955                           
   956                           ;incstack = 0
   957                           ; Regs used in _SPI_send: [wreg+status,2+status,0+btemp+1]
   958                           ;SPI_send@addr stored from wreg
   959     0103  00F4               	movwf	SPI_send@addr
   960                           
   961                           ;DigitalRotaryEncoder.c: 88: int i;;DigitalRotaryEncoder.c: 89: PORTCbits.RC1 = 0;
   962     0104  1087               	bcf	7,1	;volatile
   963                           
   964                           ;DigitalRotaryEncoder.c: 90: for (i=0; i<8; i++){
   965     0105  01F5               	clrf	SPI_send@i
   966     0106  01F6               	clrf	SPI_send@i+1
   967     0107                     l36:
   968                           
   969                           ;DigitalRotaryEncoder.c: 91: PORTCbits.RC0 = 0;
   970     0107  1283               	bcf	3,5	;RP0=0, select bank0
   971     0108  1007               	bcf	7,0	;volatile
   972                           
   973                           ;DigitalRotaryEncoder.c: 92: PORTCbits.RC2 = (addr & 0b10000000) ? 1:0 ;
   974     0109  1FF4               	btfss	SPI_send@addr,7
   975     010A  290E               	goto	u230
   976     010B  1283               	bcf	3,5	;RP0=0, select bank0
   977     010C  1507               	bsf	7,2	;volatile
   978     010D  2910               	goto	u244
   979     010E                     u230:
   980     010E  1283               	bcf	3,5	;RP0=0, select bank0
   981     010F  1107               	bcf	7,2	;volatile
   982     0110                     u244:
   983                           
   984                           ;DigitalRotaryEncoder.c: 93: PORTCbits.RC0 = 1;
   985     0110  1407               	bsf	7,0	;volatile
   986                           
   987                           ;DigitalRotaryEncoder.c: 94: addr = addr << 1;
   988     0111  0874               	movf	SPI_send@addr,w
   989     0112  00F3               	movwf	??_SPI_send
   990     0113  0773               	addwf	??_SPI_send,w
   991     0114  00F4               	movwf	SPI_send@addr
   992     0115  3001               	movlw	1
   993     0116  07F5               	addwf	SPI_send@i,f
   994     0117  1803               	skipnc
   995     0118  0AF6               	incf	SPI_send@i+1,f
   996     0119  3000               	movlw	0
   997     011A  07F6               	addwf	SPI_send@i+1,f
   998     011B  0876               	movf	SPI_send@i+1,w
   999     011C  3A80               	xorlw	128
  1000     011D  00FF               	movwf	127
  1001     011E  3080               	movlw	128
  1002     011F  027F               	subwf	127,w
  1003     0120  1D03               	skipz
  1004     0121  2924               	goto	u255
  1005     0122  3008               	movlw	8
  1006     0123  0275               	subwf	SPI_send@i,w
  1007     0124                     u255:
  1008     0124  1C03               	skipc
  1009     0125  2907               	goto	l36
  1010                           
  1011                           ;DigitalRotaryEncoder.c: 95: };DigitalRotaryEncoder.c: 96: for (i=0; i<8; i++){
  1012     0126  01F5               	clrf	SPI_send@i
  1013     0127  01F6               	clrf	SPI_send@i+1
  1014     0128                     l38:
  1015                           
  1016                           ;DigitalRotaryEncoder.c: 97: PORTCbits.RC0 = 0;
  1017     0128  1283               	bcf	3,5	;RP0=0, select bank0
  1018     0129  1007               	bcf	7,0	;volatile
  1019                           
  1020                           ;DigitalRotaryEncoder.c: 98: PORTCbits.RC2 = (data & 0b10000000) ? 1:0 ;
  1021     012A  1FF2               	btfss	SPI_send@data,7
  1022     012B  292F               	goto	u260
  1023     012C  1283               	bcf	3,5	;RP0=0, select bank0
  1024     012D  1507               	bsf	7,2	;volatile
  1025     012E  2931               	goto	u274
  1026     012F                     u260:
  1027     012F  1283               	bcf	3,5	;RP0=0, select bank0
  1028     0130  1107               	bcf	7,2	;volatile
  1029     0131                     u274:
  1030                           
  1031                           ;DigitalRotaryEncoder.c: 99: PORTCbits.RC0 = 1;
  1032     0131  1407               	bsf	7,0	;volatile
  1033                           
  1034                           ;DigitalRotaryEncoder.c: 100: data = data << 1;
  1035     0132  0872               	movf	SPI_send@data,w
  1036     0133  00F3               	movwf	??_SPI_send
  1037     0134  0773               	addwf	??_SPI_send,w
  1038     0135  00F2               	movwf	SPI_send@data
  1039     0136  3001               	movlw	1
  1040     0137  07F5               	addwf	SPI_send@i,f
  1041     0138  1803               	skipnc
  1042     0139  0AF6               	incf	SPI_send@i+1,f
  1043     013A  3000               	movlw	0
  1044     013B  07F6               	addwf	SPI_send@i+1,f
  1045     013C  0876               	movf	SPI_send@i+1,w
  1046     013D  3A80               	xorlw	128
  1047     013E  00FF               	movwf	127
  1048     013F  3080               	movlw	128
  1049     0140  027F               	subwf	127,w
  1050     0141  1D03               	skipz
  1051     0142  2945               	goto	u285
  1052     0143  3008               	movlw	8
  1053     0144  0275               	subwf	SPI_send@i,w
  1054     0145                     u285:
  1055     0145  1C03               	skipc
  1056     0146  2928               	goto	l38
  1057                           
  1058                           ;DigitalRotaryEncoder.c: 101: };DigitalRotaryEncoder.c: 102: PORTCbits.RC0 = 0;
  1059     0147  1283               	bcf	3,5	;RP0=0, select bank0
  1060     0148  1007               	bcf	7,0	;volatile
  1061                           
  1062                           ;DigitalRotaryEncoder.c: 103: PORTCbits.RC1 = 1;
  1063     0149  1487               	bsf	7,1	;volatile
  1064     014A  0008               	return
  1065     014B                     __end_of_SPI_send:
  1066                           
  1067                           	psect	text7
  1068     01A4                     __ptext7:	
  1069 ;; *************** function _ISR_function *****************
  1070 ;; Defined at:
  1071 ;;		line 47 in file "DigitalRotaryEncoder.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;		None
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		None
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMMON   BANK0   BANK1
  1085 ;;      Params:         0       0       0
  1086 ;;      Locals:         0       0       0
  1087 ;;      Temps:          2       0       0
  1088 ;;      Totals:         2       0       0
  1089 ;;Total ram usage:        2 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		Interrupt level 1
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098     01A4                     _ISR_function:	
  1099                           ;psect for function _ISR_function
  1100                           
  1101                           
  1102                           ;DigitalRotaryEncoder.c: 50: if (INTCONbits.RAIF){
  1103     01A4  1C0B               	btfss	11,0	;volatile
  1104     01A5  29AA               	goto	i1l24
  1105                           
  1106                           ;DigitalRotaryEncoder.c: 51: int_F = 1;
  1107     01A6  1283               	bcf	3,5	;RP0=0, select bank0
  1108     01A7  01B6               	clrf	_int_F
  1109     01A8  0AB6               	incf	_int_F,f
  1110                           
  1111                           ;DigitalRotaryEncoder.c: 52: INTCONbits.RAIF = 0;
  1112     01A9  100B               	bcf	11,0	;volatile
  1113     01AA                     i1l24:
  1114     01AA  0871               	movf	??_ISR_function+1,w
  1115     01AB  008A               	movwf	10
  1116     01AC  0E70               	swapf	??_ISR_function,w
  1117     01AD  0083               	movwf	3
  1118     01AE  0EFE               	swapf	126,f
  1119     01AF  0E7E               	swapf	126,w
  1120     01B0  0009               	retfie
  1121     01B1                     __end_of_ISR_function:
  1122     007E                     btemp	set	126	;btemp
  1123     007E                     wtemp0	set	126
  1124                           
  1125                           	psect	intentry
  1126     0004                     __pintentry:	
  1127                           ;incstack = 0
  1128                           ; Regs used in _ISR_function: []
  1129                           
  1130     0004                     interrupt_function:
  1131     007E                     saved_w	set	btemp
  1132     0004  00FE               	movwf	btemp
  1133     0005  0E03               	swapf	3,w
  1134     0006  00F0               	movwf	??_ISR_function
  1135     0007  080A               	movf	10,w
  1136     0008  00F1               	movwf	??_ISR_function+1
  1137     0009  29A4               	ljmp	_ISR_function
  1138                           
  1139                           	psect	config
  1140                           
  1141                           ;Config register CONFIG @ 0x2007
  1142                           ;	Oscillator Selection bits
  1143                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  1144                           ;	Watchdog Timer Enable bit
  1145                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1146                           ;	Power-up Timer Enable bit
  1147                           ;	PWRTE = OFF, PWRT disabled
  1148                           ;	MCLR Pin Function Select bit
  1149                           ;	MCLRE = OFF, MCLR pin function is digital input, MCLR internally tied to VDD
  1150                           ;	Code Protection bit
  1151                           ;	CP = OFF, Program memory code protection is disabled
  1152                           ;	Internal Oscillator Frequency Select bit
  1153                           ;	IOSCFS = 8MHZ, 8 MHz
  1154                           ;	Brown-out Reset Selection bits
  1155                           ;	BOREN = OFF, BOR Disabled
  1156     2007                     	org	8199
  1157     2007  3CD4               	dw	15572

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     22      23
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _display_num->___llmod
    _display_digit->___llmod
    _MAX7219_Setup->_SPI_send

Critical Paths under _ISR_function in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_display_num
    _display_num->___lldiv

Critical Paths under _ISR_function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_function in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11     7      4    1749
                                             11 BANK0     11     7      4
                      _MAX7219_Setup
                        _display_num
 ---------------------------------------------------------------------------------
 (1) _display_num                                          6     2      4    1262
                                              5 BANK0      6     2      4
                            ___lldiv
                            ___llmod
                      _display_digit
 ---------------------------------------------------------------------------------
 (2) _display_digit                                        4     0      4     570
                                              0 BANK0      4     0      4
                           _SPI_send
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     245
                                              2 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     248
                                              2 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _MAX7219_Setup                                        0     0      0     440
                           _SPI_send
 ---------------------------------------------------------------------------------
 (3) _SPI_send                                             5     4      1     440
                                              2 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR_function                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MAX7219_Setup
     _SPI_send
   _display_num
     ___lldiv
     ___llmod
     _display_digit
       _SPI_send
       ___llmod (ARG)

 _ISR_function (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     16      17       4       28.7%
BANK1               20      0       0       5        0.0%
ABS                  0      0      23       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0      23       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Jul 25 01:00:45 2023

                     l36 0107                       l38 0128             ?_display_num 0025  
                    l706 00BD                      l660 002F                      l740 0166  
                    l672 0064                      l658 001F                      l690 00A3  
                    l668 0057                      l684 0075                      l686 0085  
                    l694 00B0                      u230 010E                      u305 0023  
                    u260 012F                      u244 0110                      u325 0031  
                    u405 00A4                      u255 0124                      u335 0046  
                    u345 0058                      u425 0100                      u274 0131  
                    u285 0145                      u375 0079                      u395 0093  
         ?_display_digit 0020              main@counter 0033                     i1l24 01AA  
                   _main 014B                     btemp 007E                     start 000A  
                  ?_main 002B                    _ANSEL 0091          __end_of___lldiv 006D  
        __end_of___llmod 00B9                    _int_F 0036                    pclath 000A  
       __end_of_SPI_send 014B             display_num@i 0029                    status 0003  
                  wtemp0 007E          __initialization 000B             __end_of_main 0190  
                 ??_main 002F          ??_display_digit 007C         ___llmod@dividend 0076  
              ??___lldiv 007A                ??___llmod 007A                   saved_w 007E  
  __end_of_MAX7219_Setup 01A4  __end_of__initialization 000D           __pcstackCOMMON 0070  
           SPI_send@addr 0074             SPI_send@data 0072                ?_SPI_send 0072  
             __pbssBANK0 0036               __pmaintext 014B               __pintentry 0004  
             ??_SPI_send 0073            ?_ISR_function 0070                  ___lldiv 000F  
                ___llmod 006D                SPI_send@i 0075     display_digit@digit_X 0020  
                __ptext1 00B9                  __ptext2 01B1                  __ptext3 006D  
                __ptext4 000F                  __ptext5 0190                  __ptext6 0103  
                __ptext7 01A4                  main@dir 0035     end_of_initialization 000D  
         ??_ISR_function 0070          ___lldiv@divisor 0072          ___lldiv@counter 0024  
         display_num@val 0025                _PORTAbits 0005                _PORTCbits 0007  
              _TRISCbits 0087    __end_of_display_digit 01B6            ??_display_num 007C  
    start_initialization 000B          ___llmod@divisor 0072          ___llmod@counter 007B  
   __end_of_ISR_function 01B1      __end_of_display_num 0103                ___latbits 0000  
          __pcstackBANK0 0020                 ?___lldiv 0072                 ?___llmod 0072  
          _MAX7219_Setup 0190        interrupt_function 0004                 _IOCAbits 0096  
            _display_num 00B9                 _SPI_send 0103           ?_MAX7219_Setup 0070  
       display_digit@val 0022             _ISR_function 01A4                 main@argc 002B  
               main@argv 002D               _INTCONbits 000B          ??_MAX7219_Setup 0077  
               intlevel1 0000         ___lldiv@dividend 0076         ___lldiv@quotient 0020  
          _display_digit 01B1  
